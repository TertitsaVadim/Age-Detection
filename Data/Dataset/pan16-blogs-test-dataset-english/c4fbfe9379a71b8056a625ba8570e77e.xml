<?xml version="1.0" encoding="UTF-8" standalone="no"?><author age_group="xx" gender="xx" lang="EN" type="blog" url="blogs.msdn.com/b/gsmyth/">
	<documents count="25">
		<document id="400b1e8cf2fa3f9d37ca0f9902c3329d" url="http://blogs.msdn.com/b/gsmyth/archive/2012/05/12/appnap-data.aspx"><![CDATA[<p>Following on from <a href="http://blogs.msdn.com/b/gsmyth/archive/2012/03/17/how-many-search-apps-do-you-need-on-your-phone.aspx" title="Blog post">last time</a>, I thought I'd start by describing the persisted data for <a href="http://windowsphone.com/s?appid=a8edb046-86dd-46d0-a62a-c8b04fca60bb" title="Application page">AppNap</a>, which consists of an ordered list of search shortcuts, and a search shortcut is a name (which appears in the list presented to the user) and a bit of text used when actually performing the search. Because the user can change these entries on the fly, rather than a plain old C# class, I made this implement INotifyPropertyChanged:</p>
<pre>    public class SearchShortcut : INotifyPropertyChanged<br />    {<br />        public string Name<br />        {<br />            get  { return name; }<br />            set<br />            {<br />                this.name = value;<br />                RaisePropertyChanged("Name");<br />            }<br />        }<br />        private string name;<br /><br />        public string Extra<br />        {<br />            get { return extra; }<br />            set<br />            {<br />                this.extra = value;<br />                RaisePropertyChanged("Extra");<br />            }<br />        }<br />        private string extra;<br /><br />        public event PropertyChangedEventHandler PropertyChanged;<br /><br />        private void RaisePropertyChanged(string propertyName)<br />        {<br />            var eh = this.PropertyChanged;<br />            if (eh != null)<br />                eh(this, new PropertyChangedEventArgs(propertyName));<br />        }<br />    }</pre>
<p>And the list of search entries to provide to the user is abstracted into this Settings class (minus error checking for brevity):</p>
<pre>    public class Settings<br />    {<br />        public ObservableCollection&lt;SearchShortcut&gt; Shortcuts;<br /><br />        private Settings() { }<br /><br />        public static Settings LoadAll()<br />        {<br />            var state = new Settings();<br />            state.LoadShortcuts();<br />            return state;<br />        }<br /><br />        public void SaveAll()<br />        {<br />            var settings = IsolatedStorageSettings.ApplicationSettings;<br />            SaveShortcuts(settings);<br />            settings.Save();<br />        }<br /><br />        private void SaveShortcuts(IsolatedStorageSettings settings)<br />        {<br />            var sb = new StringBuilder();<br />            foreach (var s in Shortcuts)<br />                sb.AppendFormat("{0}	{1}
", s.Name, s.Extra);<br />            settings["Shortcuts"] = sb.ToString();</pre>
<pre>        }<br /><br />        private void LoadShortcuts()<br />        {<br />            var settings = IsolatedStorageSettings.ApplicationSettings;<br />            Shortcuts = new ObservableCollection&lt;SearchShortcut&gt;();<br />            string shortcutString;<br />            if (settings.TryGetValue("Shortcuts", out shortcutString))<br />            {<br />                foreach (var s in shortcutString.Split('
'))<br />                {<br />                    var pieces = s.Split('	');<br />                    var shortcut = new SearchShortcut { Name = pieces[0], Extra = pieces[1] };<br />                    Shortcuts.Add(shortcut);<br />                }</pre>
<pre>            }<br />            if (Shortcuts.Count == 0)<br />                SetDefaultShortcuts();<br />        }</pre>
<p>Here, LoadAll gives back settings read from isolated storage on the phone and SaveAll writes the current settings into isolated storage. Within LoadShortcuts and SaveShortcuts I use a very simple encoding of the shortcut's name and extra text as a tab separated line for each shortcut (which would prevent both tab and newline from being used in the search shortcuts, but that's not much of a limitation). If no data items are found in isolated storage, SetDefaultShortcuts creates the default set you see when you first run the application; that routine consists of lines like:</p>
<pre>            Shortcuts.Add(new SearchShortcut { Name = "IMDB [site]", Extra = "http://www.imdb.com/find?q=" });<br />            Shortcuts.Add(new SearchShortcut { Name = "IMDB [mobile]", Extra = "http://m.imdb.com/find?q=" });<br />            Shortcuts.Add(new SearchShortcut { Name = "IMDB [web]", Extra = "site:imdb.com" });</pre>
<p>Having defined my settings, what do I do with them? Loading is done when the application starts, in these two routines in my App.xaml.cs:</p>
<pre>        private void Application_Launching(object sender, LaunchingEventArgs e)<br />        {<br />            Settings = Settings.LoadAll();<br />        }<br /><br />        private void Application_Activated(object sender, ActivatedEventArgs e)<br />        {<br />            if (Settings == null)<br />                Settings = Settings.LoadAll();<br />        }</pre>
<p>Application_Activated is invoked when resuming from both dormant and tombstoned, as outlined in the <a href="http://msdn.microsoft.com/en-us/library/ff817008(v=VS.92).aspx" title="MSDN documentation">execution overview on MSDN</a>: in the former, there's no need to reload the settings though it make little difference here because there's so little in the way of settings here. Typically one would check&nbsp;e.IsApplicationInstancePreserved but Settings being non-null is a pretty good indication that they've not been preserved! Application suspension is often a good time to save settings: however, I prefer to save them as soon as they change (just in case my application crashes), so the calls to SaveAll occur in the code behind my settings page.</p>
<p>So... Handling user settings in Windows Phone 7 is incredibly easy, given the isolated storage classes, in particular <a href="http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragesettings(v=VS.95).aspx" title="MSDN documentation">IsolatedStorageSettings</a>.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10303160" width="1" height="1">
]]>
		</document>
		<document id="800f444b64bede686a1e45edd9f8ad2f" url="http://blogs.msdn.com/b/gsmyth/archive/2012/05/27/appnap-user-interface.aspx"><![CDATA[<p>The <a href="http://windowsphone.com/s?appid=a8edb046-86dd-46d0-a62a-c8b04fca60bb" title="Marketplace link">AppNap</a> main page content is pretty much a grid with three elements - the search box, the list of search buttons, and an ad control. There's a picture of it in <a href="http://blogs.msdn.com/b/gsmyth/archive/2012/03/17/how-many-search-apps-do-you-need-on-your-phone.aspx" title="AppNap introduction">the first post in this series</a>, and the Xaml looks like:</p>
<pre>		&lt;Grid x:Name="ContentPanel" Grid.Row="1"&gt;<br />			&lt;Grid.RowDefinitions&gt;<br />				&lt;RowDefinition Height="Auto"/&gt;<br />				&lt;RowDefinition /&gt;<br />				&lt;RowDefinition Height="Auto" /&gt;<br />			&lt;/Grid.RowDefinitions&gt;<br /><br />			&lt;TextBox x:Name="TextQuery" Grid.Row="0" KeyUp="TextQuery_KeyUp" InputScope="Search" /&gt;<br /><br />			&lt;ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" Background="Transparent"&gt;<br />				&lt;ItemsControl x:Name="ListSearch" IsEnabled="False"<br />						  ItemTemplate="{StaticResource TemplateSearchShortcutPortrait}"<br />						  HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch"&gt;<br />					&lt;ItemsControl.ItemsPanel&gt;<br />						&lt;ItemsPanelTemplate&gt;<br />							&lt;toolkit:WrapPanel /&gt;<br />						&lt;/ItemsPanelTemplate&gt;<br />					&lt;/ItemsControl.ItemsPanel&gt;<br />				&lt;/ItemsControl&gt;<br />			&lt;/ScrollViewer&gt;<br /><br />			&lt;my:AdControl x:Name="AdControl" AdUnitId="Image480_80" ApplicationId="test_client"<br />					  Grid.Row="2" Height="80" Width="480" IsAutoRefreshEnabled="True" /&gt;<br />		&lt;/Grid&gt;</pre>
<p>There are a few things in that I want to point out:</p>
<p>First, I've set the text box <a href="http://msdn.microsoft.com/en-us/library/ff426929(v=vs.95).aspx" title="Input scope overview">input scope</a> to Search to give a "search" button graphic for the "enter" key. Setting input scope is almost always worth doing, to tailor the soft keyboard to whatever semantics your textbox has. My search buttons are disabled until the user has typed something: my TextQuery_KeyUp method enables the buttons when the textbox is non-empty (it also behaves as if the first search button is clicked if the user hits "enter" - or "search" as explained earlier). I could have done this using something like MVVM, with the enabled property of the buttons being tied to a non-empty property of the model, but this application is so small that MVVM didn't really seem worth the time and effort.</p>
<p>Next, the buttons list is not a ListBox because I really don't want to select individual elements, I just want to act on them when they're pressed. I could have styled a ListBox such that selected elements didn't look any different to unselected ones, but I decided to use an ItemsControl instead. ItemsControls don't automatically sprout scroll bars when necessary, as ListBoxes do, so I have to wrap the ItemsControl in a ScrollViewer. I'll describe the ItemTemplate in a bit, but the final thing I want to mention here is the use of a WrapPanel from the <a href="http://silverlight.codeplex.com/" title="Codeplex page">Silverlight Toolkit</a>: this allows me to have multiple buttons on one row of the list (if they're short enough - which is the case in landscape mode) very easily.</p>
<p>The final row uses the <a href="http://msdn.microsoft.com/en-us/library/hh300674(v=msads.20).aspx" title="MSDN documentation">Microsoft advertising SDK</a> - when you sign up for this on <a href="https://pubcenter.microsoft.com" title="pubCenter">pubCenter</a>, you get a unique ApplicationId, but I'm showing the test one here. The AdControl really is quite straightforward to use: add the control the Xaml and that's about it! Do make sure you download the latest SDK: an earlier version would occasionally crash and terminate the application.</p>
<p>Having mentioned the Silverlight Toolkit, although not shown here, I'm also using its transition services to give rather nice turnstile animations between pages in the application. <a href="http://blogs.msdn.com/b/wfaught/archive/2010/11/15/transitions.aspx" title="Transitions article">Will Faught</a> gives a good explanation of how to use them.</p>
<p>My data template for the list items is:</p>
<pre>		&lt;DataTemplate x:Key="TemplateSearchShortcutPortrait"&gt;<br />			&lt;Button Margin="5" Width="470" Click="SearchButton_Click"&gt;<br />				&lt;TextBlock Text="{Binding Name}" Margin="2" TextAlignment="Center" HorizontalAlignment="Stretch"<br />						   FontSize="{StaticResource PhoneFontSizeLarge}" /&gt;<br />			&lt;/Button&gt;<br />		&lt;/DataTemplate&gt;</pre>
<p>They really are just buttons. I struggled for a while to get them to size automatically, but couldn't get this to work in conjunction with the WrapPanel, so I ended up hard coding a width. And, unfortunately, a width that looks good in portrait mode doesn't look as good in landscape, so I have a similarly named template for that mode: I switch between templates in a handler for the page's OrientationChanged event. There must be a better way to do this!</p>
<p>Moving on to the code-behind, the page Loaded event handler sets the list's ItemsSource to the Settings' Shortcuts list mentioned <a href="http://blogs.msdn.com/b/gsmyth/archive/2012/05/12/appnap-data.aspx" title="Blog post">last time</a> (again, could have been done via view model binding if I had gone to the effort of using MVVM). The search button click is the only interesting blob of code:</p>
<pre>        private void SearchButton_Click(object sender, RoutedEventArgs e)<br />        {<br />            var btn = (FrameworkElement)sender;<br />            var ss = (SearchShortcut)btn.DataContext;<br />            var text = this.TextQuery.Text.Trim();<br />            try<br />            {<br />                if (shortcut.Extra.StartsWith("http:"))<br />                {<br />                    var uri = new Uri(shortcut.Extra + HttpUtility.UrlEncode(text), UriKind.Absolute);<br />                    var webTask = new WebBrowserTask { Uri = uri };<br />                    webTask.Show();<br />                }<br />                else<br />                {<br />                    var query = text + ' ' + shortcut.Extra;<br />                    var searchTask = new SearchTask { SearchQuery = query };<br />                    searchTask.Show();<br />                }<br />            }<br />            catch<br />            {<br />            }&nbsp;<br />        }</pre>
<p>If the shortcut is one that should be activated by hitting a web page (see the <a href="http://blogs.msdn.com/b/gsmyth/archive/2012/03/17/how-many-search-apps-do-you-need-on-your-phone.aspx" title="AppNap introduction">first post</a> for an overview), construct a URL and navigate to it; otherwise, use the search task and append the extra text. The unconditional try..catch block is a tad embarrassing: it's been reported that sometimes these task invocations can throw exceptions - I've been too lazy to track down the details, and am not even sure if they occur on actual devices rather than being artefacts of the emulator, but I hedge my bets by silently swallowing anything nasty that results from running the tasks.</p>
<p>Talking about nasty things that result from using these tasks... My application does not make any use of the user's location at all (that is an option for the AdControl but I chose not to use it). However, web search can use location data and, the first time you run a search, it'll ask you if you want to let it access location. This added some frustrating delays to the application publication process because the testers maintained that my app was using location but not informing the user: it took a few extra attempts to persuade them that (a) it wasn't my app asking for location data and (b) I had no control over what the search app could or could not do with that data. Perhaps I should have rolled my own search (using, say, the Bing APIs) instead of relying on the SearchTask - but, as you can see from above, using the SearchTask is really really easy.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10303225" width="1" height="1">
]]>
		</document>
		<document id="479ce323dddcc5f2cc1355cf9407be0e" url="http://blogs.msdn.com/b/gsmyth/archive/2012/06/17/appnap-settings-page.aspx"><![CDATA[<p>The setting page for AppNap is a rather modified version of button list the main page: instead of clicking an entry to activate it, you click on an entry to be able to edit it. I think the politest thing I can say about my editing interface is that it's functional! I chose to implement the list as a ListBox this time, with the selected state having a template which includes edit controls: the unselected state has the following data template:</p>
<pre>        &lt;DataTemplate x:Key="TemplateSearchShortcut"&gt;<br />            &lt;Border Margin="5" Width="450"&gt;<br />                &lt;TextBlock Text="{Binding Name}" Margin="2" TextAlignment="Center" HorizontalAlignment="Stretch"<br />                           FontSize="{StaticResource PhoneFontSizeLarge}" /&gt;<br />            &lt;/Border&gt;<br />        &lt;/DataTemplate&gt;</pre>
<p>and the selected state:</p>
<pre>        &lt;DataTemplate x:Key="TemplateSearchShortcutEditable"&gt;<br />            &lt;Border Margin="5" Width="444" BorderThickness="2" BorderBrush="{StaticResource PhoneAccentBrush}"&gt;<br />                &lt;StackPanel Margin="2"&gt;<br />                    &lt;TextBlock Text="Name:" Foreground="{StaticResource PhoneForegroundBrush}" Margin="2" /&gt;<br />                    &lt;TextBox x:Name="TextName" Text="{Binding Name, Mode=TwoWay}" FontSize="{StaticResource PhoneFontSizeMedium}" /&gt;<br />                    &lt;TextBlock Text="Extra query component:" Foreground="{StaticResource PhoneForegroundBrush}" Margin="2" /&gt;<br />                    &lt;TextBox Text="{Binding Extra, Mode=TwoWay}" FontSize="{StaticResource PhoneFontSizeMedium}" /&gt;<br />                    &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt;<br />                        &lt;c4fcontrols:RoundButton ImageSource="Images/appbar.up.png" Click="UpButton_Click" /&gt;<br />                        &lt;c4fcontrols:RoundButton ImageSource="Images/appbar.down.png" Click="DownButton_Click" /&gt;<br />                        &lt;c4fcontrols:RoundButton ImageSource="Images/appbar.delete.png" Click="DeleteButton_Click" /&gt;<br />                    &lt;/StackPanel&gt;<br />                &lt;/StackPanel&gt;<br />            &lt;/Border&gt;<br />        &lt;/DataTemplate&gt;</pre>
<p>I've grabbed some buttons from the <a title="Coding4Fun on CodePlex" href="http://coding4fun.codeplex.com/">Coding4Fun toolkit</a>&nbsp;to save me the effort of styling such things myself! The button actions are fairly obvious: reorder the list, or delete the current item; the item contents are represented as TextBoxes so that the user can edit them - data binding takes care of updating the items. As an example, here's the code dealing with reordering the list:</p>
<pre>        private void UpButton_Click(object sender, RoutedEventArgs e)<br />        {<br />            MoveCurrentItem(-1);<br />        }<br /><br />        private void DownButton_Click(object sender, RoutedEventArgs e)<br />        {<br />            MoveCurrentItem(1);<br />        }<br /><br />        private void MoveCurrentItem(int delta)<br />        {<br />            var index = this.ListSearch.SelectedIndex;<br />            var settings = ((App)Application.Current).Settings; // Could as easily use ListSearch.ItemsSource<br />            var newIndex = index + delta;<br />            if (newIndex &gt;= 0 &amp;&amp; newIndex &lt; settings.Shortcuts.Count)<br />            {<br />                var item = settings.Shortcuts[index];<br />                settings.Shortcuts.RemoveAt(index);<br />                settings.Shortcuts.Insert(newIndex, item);<br />            }<br />        }</pre>
<p>On navigating away from the page, I save the new ordering so that it will be picked up next time the application is run - I do it immediately rather than waiting for a suspend event, partly because I use less time when suspending (a trivial amount less in this case) and partly to make sure the state is preserved should the application crash.</p>
<p>The list box item style selects the appropriate template for the item being shown (I'm showing just the template selection below, the actual code also includes some other changes too as well as other state groups:</p>
<pre>    &lt;Style x:Key="SearchSettingsListBoxItemStyle" TargetType="ListBoxItem"&gt;<br />      &lt;Setter Property="Template"&gt;<br />        &lt;Setter.Value&gt;<br />          &lt;ControlTemplate TargetType="ListBoxItem"&gt;<br />            &lt;Border x:Name="LayoutRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}"&gt;<br />              &lt;VisualStateManager.VisualStateGroups&gt;<br />                &lt;VisualStateGroup x:Name="SelectionStates"&gt;<br />                    &lt;VisualState x:Name="Unselected" /&gt;<br />                    &lt;VisualState x:Name="Selected"&gt;<br />                      &lt;Storyboard&gt;<br />                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="ContentTemplate" Storyboard.TargetName="ContentContainer"&gt;<br />                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TemplateSearchShortcutEditable}"/&gt;<br />                        &lt;/ObjectAnimationUsingKeyFrames&gt;<br />                      &lt;/Storyboard&gt;<br />                   &lt;/VisualState&gt;<br />                   &lt;VisualState x:Name="SelectedUnfocused"&gt;<br />                       &lt;Storyboard&gt;<br />                           &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="ContentTemplate" Storyboard.TargetName="ContentContainer"&gt;<br />                               &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource TemplateSearchShortcutEditable}"/&gt;<br />                           &lt;/ObjectAnimationUsingKeyFrames&gt;<br />                       &lt;/Storyboard&gt;<br />                   &lt;/VisualState&gt;<br />                 &lt;/VisualStateGroup&gt;<br />             &lt;/VisualStateManager.VisualStateGroups&gt;<br />             &lt;ContentControl x:Name="ContentContainer" ContentTemplate="{StaticResource TemplateSearchShortcut}" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/&gt;<br />           &lt;/Border&gt;<br />         &lt;/ControlTemplate&gt;<br />       &lt;/Setter.Value&gt;<br />      &lt;/Setter&gt;<br />    &lt;/Style&gt;</pre>
<p>And that's it.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10304633" width="1" height="1">
]]>
		</document>
		<document id="26c73aa154a4ddb3a8b2b5ebfccc7da6" url="http://blogs.msdn.com/b/gsmyth/archive/2012/07/01/there-s-more-to-outlook-than-mailitems.aspx"><![CDATA[<p>I've published a new version of the&nbsp;<a href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx" title="NoReplyAll project page">NoReplyAll Outlook add-in</a>&nbsp;with pretty much the only change being the addition of a no-forward button to meeting requests.</p>
<p>As indicated in a couple of <a href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/06/outlook-object-model.aspx" title="Blog post">previous</a> <a href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/27/other-ribbons.aspx" title="Blog post">posts</a>, everything in the add-in until this point has been&nbsp;implemented in terms of Outlook <a href="http://msdn.microsoft.com/en-us/library/ff861332.aspx" title="MSDN documentation">MailItem</a> objects.A look around <a href="http://msdn.microsoft.com/en-us/library/ff866465.aspx" title="MSDN page">the object model</a> will show you that most items that Outlook looks after for the user - appointment items, meeting items, etc. - tend to have similar properties, such as sender, subject, and so on. Unfortunately, there is no common OutlookItem base class/interface from which all these derive - there's no common ground between a MailItem and a MeetingItem more sophisticated than System.Object (actually System.__ComObject if I'm being precise). This means that I can't easily generalise a snippet of code like the following to handle any sort of Outlook Item:</p>
<pre>var item&nbsp;=&nbsp;inspector.CurrentItem&nbsp;as&nbsp;Outlook.MailItem;
if&nbsp;(item&nbsp;!=&nbsp;null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.Actions[2].Enabled&nbsp;=&nbsp;!pressed;</pre>
<p>Well, that's not quite true... One incredibly easy way is the new(ish) <a href="http://msdn.microsoft.com/en-us/library/dd264741.aspx" title="MSDN page">dynamic</a> keyword in C#:</p>
<pre>dynamic item&nbsp;=&nbsp;inspector.CurrentItem;
if&nbsp;(item&nbsp;!=&nbsp;null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.Actions[2].Enabled&nbsp;=&nbsp;!pressed;</pre>
<p>Using dynamic pushes off the property lookup until runtime, so I can write code that tries to touch any named property regardless of the compile-time type of the variable. If the property does not exist, the attempt to access it will throw an exception, which is one disadvantage of this technique - I'd need to surround my accesses with try...catch to be robust. Another easily worked around disadvantage is that, as written, because item is dynamic, then so is Actions and element 2 of that, and the Enabled flag, which is a smidge inefficient - the "fix" is to do something like:</p>
<pre>dynamic item&nbsp;=&nbsp;inspector.CurrentItem;
if&nbsp;(item&nbsp;!=&nbsp;null)<br />{<br />     var actions = item.Actions as Outlook.Actions;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[2].Enabled&nbsp;=&nbsp;!pressed;<br />}&nbsp;</pre>
<p>The biggest disadvantage of this for me, though, is that for various reasons, I need to keep my published add-in running with .NET Framework 3.5, and dynamic only comes in with version 4. Before the days of dynamic, we had to use reflection, which isn't actually all that scary...</p>
<p>Here's a routine to get hold of a (public) property - a poor man's dynamic lookup:</p>
<pre><span>internal</span>&nbsp;<span>static</span>&nbsp;<span>object</span>&nbsp;GetProperty(<span>this</span>&nbsp;<span>object</span>&nbsp;item,&nbsp;<span>string</span>&nbsp;propertyName)
{
&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;item.GetType().InvokeMember(propertyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>BindingFlags</span>.Instance&nbsp;|&nbsp;<span>BindingFlags</span>.Public&nbsp;|&nbsp;<span>BindingFlags</span>.GetProperty,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>null</span>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>null</span>);
}
</pre>
<p>A couple of things to say about that. First, notice the "this" on the first parameter - this (along with the "static") indicates that this is an <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx" title="MSDN page">extension method</a>, which means I can use it as:</p>
<pre>var ob = &nbsp;item.GetProperty("Actions") as Outlook.Actions;
</pre>
<p>making it look like any "normal" property access. The second thing to say is that there is a number of ways to access properties via reflection - why did I choose <a href="http://msdn.microsoft.com/en-us/library/system.type.invokemember.aspx" title="MSDN page">InvokeMember</a> here instead of the rather more obvious and much less typing&nbsp;<a href="http://msdn.microsoft.com/en-us/library/kz0a8sxy" title="MSDN page">GetProperty</a>? It turns out that the objects we're interested in, as mentioned above, are represented as System.__ComObject, and the Type access methods, such as GetProperty only tell you about that object and not about the COM object behind it: InvokeMethod, on the other hand, does reach through the wrapper.</p>
<p>Putting that together, I can write code almost as concise as using dynamic:</p>
<pre>var item&nbsp;=&nbsp;inspector.CurrentItem;
if&nbsp;(item&nbsp;!=&nbsp;null)<br />{<br />     var actions = item.GetProperty("Actions") as Outlook.Actions;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[2].Enabled&nbsp;=&nbsp;!pressed;<br />}&nbsp;</pre>
<p>With this in place, and all references to specific types of Outlook item removed, I've almost reached a state in which I can set no-reply, no-forward, etc. on pretty much anything that Outlook can display. The one extra bit of work is connecting things to ribbons - although the functions for setting, displaying and clearing the action flags are identical for all the object inspector windows, the appropriate ribbons have different identifiers and, in some cases, different tab identifiers, so I have to create a few more snippets of XML and wire them up. It's all pretty much as I described <a href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/27/other-ribbons.aspx" title="Blog post">before</a> but just, for example, a new blob of ribbon XML for "Microsoft.Outlook.Appointment" which references tab TabAppointment instead of the one I showed earlier for "Microsoft.Outlook.Mail.Compose" which adds controls to TabNewMailMessage.</p>
<p>Now, I can prevent (well, slow them down a little) people for forwarding meeting requests... Maybe not as common as wanting to disable reply-all on emails, but some people asked me for it.<br class="Apple-interchange-newline" /><br /></p>
<p></p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10323227" width="1" height="1">
]]>
		</document>
		<document id="18e39a885b334b016dda543fa93f8744" url="http://blogs.msdn.com/b/gsmyth/archive/2012/07/18/outlook-2013-and-noreplyall.aspx"><![CDATA[<p>As I'm sure you've noticed by now, the Office 2013 Preview is now <a href="http://msdn.microsoft.com/en-US/office/fp142390">available</a>. I've given my <a href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx" title="Project page">NoReplyAll Add-In</a> a spin and it broadly seems to function as desired - three areas that need a bit of work are:</p>
<ul>
<li>It seems that Outlook 2013 includes a missing attachment detector (I've not come across any details about how it works and if it's configurable but, then again, I've not looked very hard yet), so it's a bit silly that my add-in also checks. The next version of the add-in will disable my check when loaded in the newer Outlook.</li>
<li>Outlook 2013 includes a convenient "inline response" mechanism (there's a mention of it towards the end of the <a href="http://msdn.microsoft.com/en-us/library/office/jj229830(v=office.15)" title="MSDN page">What's new for Office 2013 developers</a> page) - when you reply to a message displayed in the preview pane, the reply appears there instead of in a separate inspector window. However, the add-in as it stands then has no means of specifying the reply-all, etc. states: there isn't a compose window and the main explorer window's ribbon displays the state of the message you're replying to rather than of the reply. I'll need to do a bit of head scratching to address this.</li>
<li>When you hover over the NoReplyAll tab on the ribbon, there's a popup which includes a pointer to more information about the add-in - however, that seems to send you to Office help rather than anything actually about the add-in, so I'll have to work out how to configure it to go somewhere more relevant.</li>
</ul>
<p>Apart from those, everything else seems to do the right thing. If you happen to spot any problems with the add-in, please do let me know, either here or on the <a href="http://social.microsoft.com/Forums/en-US/researchdesktop/threads" title="Discussion forum">feedback forum</a>.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10331230" width="1" height="1">
]]>
		</document>
		<document id="1f02cc87f87f276c21e4886a314440ca" url="http://blogs.msdn.com/b/gsmyth/archive/2012/08/04/version-number-update-tool-for-visual-studio-11.aspx"><![CDATA[<p>Quite a while ago I presented a <a href="http://blogs.msdn.com/b/gsmyth/archive/2011/10/09/visual-studio-macro-to-update-version-numbers.aspx" title="Blog post">scrappy little macro</a> I created to update version numbers in multiple Visual Studio projects. At the time I commented that Visual Studio 11 wouldn't be supporting macros so, now that <a href="http://channel9.msdn.com/posts/Visual-Studio-2012-RTM" title="Channel9 post">VS2012 has RTM'd</a>, here's a "port" to a C# version, using the <a href="http://msdn.microsoft.com/en-us/library/5abkeks7" title="MSDN page">Visual Studio Extensibility</a> mechanisms.</p>
<p>The starting point is to use the project wizard to create a Visual Studio Add-in (to be found in the Extensibility section of the template list). I chose C# as my programming language in the first step and Visual Studio 2012 as the application host in the next (the techniques work equally well for Visual Studio 2010). The next page asks for a name and description; on page 4, I specified yes to a tools menu item; and on the fifth page I felt a bit lazy and omitted the about box. The wizard creates a bunch of boilerplate code, the most interesting bit of which is the Exec method near the end of Connect.cs: as the name might suggest, this is the routine that gets run when you click the button, select the menu item or otherwise invoke the new command. Here's mine, with my additions in bold:</p>
<pre>public void Exec(string commandName, vsCommandExecOption executeOption, ref object varIn, ref object varOut, ref bool handled)<br />{<br />    handled = false;<br />    if(executeOption == vsCommandExecOption.vsCommandExecOptionDoDefault)<br />    {<br />        if(commandName == "VersionUpdate.Connect.VersionUpdate")<br />        {<br />            <strong>using (var w = new MainForm(_applicationObject))</strong><br />            <strong>{</strong><br />                <strong>w.ShowDialog();</strong><br />            <strong>}</strong><br />            handled = true;<br />            return;<br />        }<br />    }<br />}</pre>
<p>I'm showing a dialog box, in which the user can specify version information - I'd better describe that MainForm... It's a Windows Forms window which contains the same set of controls I used in the macro from last time: a checked list box in which to display found version information, a text box into which to type a new version number, and apply and cancel buttons. (You'll need to add System.Windows.Forms to project references to be able to use these objects.)</p>
<p>The form constructor iterates over all projects in the solution, adding version data to the list - pretty much the same as the macro, but with a few minor changes in syntax and where resources are found:</p>
<pre>private void PopulateList(EnvDTE80.DTE2 dte)<br />{<br />    var sol = dte.Solution;<br />    foreach (Project proj in sol.Projects)<br />    {<br />        dynamic csp = proj;<br />        foreach (var propertyName in new string[] { "AssemblyVersion", "AssemblyFileVersion" })<br />        {<br />            try<br />            {<br />               var version = proj.Properties.Item(propertyName).Value as string;<br />                if (!string.IsNullOrWhiteSpace(version))<br />                {<br />                    var versionRef = new VersionReference { Project = proj, Id = propertyName, Version = version };<br />                    this.listProjects.Items.Add(versionRef, true);<br />                }<br />            }<br />            catch<br />            {<br />            }<br />        }<br />    } // end foreach proj<br />}</pre>
<p>The argument to this function is the _applicationObject passed into MainForm's constructor and offers access to the Visual Studio object model. Rather than work out what type of project each is to determine if the version information is available, I've been incredibly lazy: I cast the project to "dynamic" and then wrap accesses through that object in a try...catch block (which would be tripped when the object doesn't support property access - other errors will trip it too, of course... did I mention I was lazy?). The VersionReference class mentioned in there is just a holder for the three items indicated, with a ToString override to show the project name, version property name and value, that ends up automatically being used when rendering the list (less effort than providing a custom data template):</p>
<pre>internal class VersionReference<br />{<br />    public override string ToString()<br />    {<br />        return string.Format("{0}, {1}={2}", Project.Name, Id, Version);<br />    }<br /><br />    internal EnvDTE.Project Project { get; set; }<br />    internal string Id { get; set; }<br />    internal string Version { get; set; }<br />}</pre>
<p>To complete the operation, the OK button invokes:</p>
<pre>private void btnOK_Click(object sender, EventArgs e)<br />{<br />      foreach (VersionReference v in this.listProjects.CheckedItems)<br />          v.Project.Properties.Item(v.Id).Value = txtVersion.Text;<br /><br />      this.Close();<br />}</pre>
<p>Putting all that together gives you a new command which can be invoked via the command window, or via a menu item - once it's been registered. I've not investigated building an installer for the add-in yet, but the wizard will register it on the development machine, which is good enough for me for the time being. The process is explained on <a href="http://msdn.microsoft.com/en-us/library/19dax6cz.aspx" title="MSDN page">MSDN</a>.</p>
<p>I've also not changed the icon from the default. Connect.OnConnection contains calls to AddNamedCommand2 for each command you add: a pair of the parameters identify the icon to be used - the fifth indicates if the icon is internal or custom, and the one after identifies the icon. The default smiley face is number 59, it seems. There are a <a href="http://msdn.microsoft.com/en-us/library/ms165626(v=vs.100).aspx" title="MSDN page">couple</a> of <a href="http://msdn.microsoft.com/en-us/library/ms228771.aspx" title="MSDN page">pages</a> on MSDN explaining how to change the icon - a small job for another day, I'll stick with a smiley face until I get bored with it.</p>
<p>The code here is very very close to that in <a href="http://blogs.msdn.com/b/gsmyth/archive/2011/10/09/visual-studio-macro-to-update-version-numbers.aspx" title="Previous blog post">the macro version</a> I wrote before, which isn't too surprising since most of it involves traversing object models that are the same in both cases.&nbsp;There's a minor syntax translation from VB to C# - if I'd thought about it sooner, I could have written this add-in in VB.NET and copied and pasted chunks of code directly.</p>
<p>Deploying the add-in is a case of copying the binary and the .addin file into an appropriate location on the destination machine as described in <a href="http://msdn.microsoft.com/en-us/library/19dax6cz(v=vs.110).aspx" title="MSDN page">MSDN documentation</a>. Maybe I'll get round to creating an installation package and publishing it on the <a href="http://visualstudiogallery.msdn.microsoft.com/" title="Visual Studio gallery">Visual Studio gallery</a>, but don't hold your breath waiting for that to happen!</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10307232" width="1" height="1">
]]>
		</document>
		<document id="8f47911549988ccc3e4ea9144859d2fc" url="http://blogs.msdn.com/b/gsmyth/archive/2012/08/21/noreplyall-add-in-2-6-1.aspx"><![CDATA[<p>A new version is now available for download: this&nbsp;<a href="http://research.microsoft.com/en-us/downloads/60860f41-88ab-4bb4-8104-765feca9cfed/default.aspx" title="NoReplyAll download">one</a>&nbsp;supports the Outlook 2013 preview, and includes a few changes to the handling of reply states of meeting requests.</p>
<ul>
<li>Outlook 2013 includes a missing attachment check, so I've disabled it in the add-in.</li>
<li>Another feature of Outlook 2013 is an "inline response" mechanism - I've added appropriate buttons to the ribbon when one is in progress.</li>
<li>The previous release included only a no-forward button for meeting requests; this version includes all three, and doesn't let you re-enable them on receipt. (Unlike for email messages - yes, I know it's inconsistent, and I'm not sure which is the better choice.)</li>
</ul><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10341867" width="1" height="1">
]]>
		</document>
		<document id="67915705cce448d8bd4f6b869c3f596f" url="http://blogs.msdn.com/b/gsmyth/archive/2012/09/08/updating-noreplyall-for-outlook-2013.aspx"><![CDATA[<p>As I mentioned in an <a title="Blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2012/07/18/outlook-2013-and-noreplyall.aspx">earlier post</a>, Outlook 2013 brings a few new features which I need to integrate with in <a title="Project page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">NoReplyAll</a>., the main one being ribbon changes when inline responses are used.</p>
<p>The <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/jj228679">What's new for Outlook 2013 developers article</a> describes programmatic access to inline response objects. An inline response is indicated by the <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/jj229061(v=office.15)">InlineResponse event</a> so it's pretty obvious that I need to handle that to update ribbon controls. Because I need my add-in to work with earlier versions of Outlook, I can't unconditionally reference the event; the Outlook 2010 VSTO interfaces obviously don't include any information about the event either. Rather than update to a newer VSTO (to be honest, I've not actually looked to see what exists, instead I'm just updating the current project with the same version of .NET framework and associated bits and pieces), I thought I'd see what I could do with reflection... (Actually, my first thought was to use dynamic, but that doesn't handle events, I think.)</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>void</span>&nbsp;AddInlineResponseHandler()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;einfo&nbsp;=&nbsp;this.explorer.GetType().GetEvent("InlineResponse",&nbsp;BindingFlags.Public&nbsp;|&nbsp;BindingFlags.Instance);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(einfo&nbsp;!=&nbsp;null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;handler&nbsp;=&nbsp;Delegate.CreateDelegate(einfo.EventHandlerType,&nbsp;this,&nbsp;this.GetType().GetMethod("OnInlineResponse",&nbsp;BindingFlags.NonPublic&nbsp;|&nbsp;BindingFlags.Instance));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;einfo.AddEventHandler(this.explorer,&nbsp;handler);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>
<p>The above uses reflection to locate the event and attach the handler (this.explorer is the active explorer object, and OnInlineResponse is my handler). The handler itself doesn't do a lot, just invalidates the explorer ribbon, causing it to refresh its button states.</p>
<p>When an inline response is on the screen, there are some new controls on the explorer ribbon, specifically the Message tab. Besides that, the remainder of the explorer ribbon is pretty much the same. As I already have some NoReply-related controls on the explorer ribbon, I thought I'd repurpose those when handling an inline response, and I can easily use the event handler above to switch into that mode. Unfortunately, I haven't discovered a means of tracking <em>exit</em>&nbsp;from inline response mode... The inline response "goes away" in three ways: the message can be sent, the response can be discarded, or the response can be popped out to an external window. The first of those can be detected via a Send event, but I haven't found a way to detect the others. So: I can detect entry to inline response mode to be able to switch my existing explorer ribbon controls, but I haven't got a way to switch them back.</p>
<p>Instead I chose to add some more controls to the Message tab - these controls indicate the state of the message being composed, while the previously existing controls show the state of the message being replied to. I think I need to come up with something less potentially confusing to the end user, but this will do for now. The controls are defined in a ContextualTabs section of the backstage and explorer ribbon XML:</p>
<pre><span>&nbsp;&lt;contextualTabs&gt;</span>
<span>&nbsp;&nbsp;&lt;tabSet&nbsp;idMso='TabComposeTools'&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&lt;tab&nbsp;idMso='TabMessage'&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;group&nbsp;id='grpIReply'&nbsp;label='Disable'&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;toggleButton&nbsp;id='btnINoReplyAll'&nbsp;tag='2:Reply&nbsp;to&nbsp;All'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size='large'&nbsp;getImage='Button_GetLargeImage'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getPressed='ItemIButton_IsPressed'&nbsp;onAction='ItemIButton_Click'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screentip='No&nbsp;Reply&nbsp;All'&nbsp;supertip='Prevent&nbsp;recipients&nbsp;within&nbsp;the&nbsp;same&nbsp;organisation&nbsp;from&nbsp;replying&nbsp;to&nbsp;all'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label='Reply&nbsp;All'&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;toggleButton&nbsp;id='btnINoReply'&nbsp;tag='1:Reply'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size='normal'&nbsp;getImage='Button_GetSmallImage'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getPressed='ItemIButton_IsPressed'&nbsp;onAction='ItemIButton_Click'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screentip='No&nbsp;Reply'&nbsp;supertip='Prevent&nbsp;recipients&nbsp;within&nbsp;the&nbsp;same&nbsp;organisation&nbsp;from&nbsp;replying'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label='Reply'&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;toggleButton&nbsp;id='btnINoForward'&nbsp;tag='3:Forward'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size='normal'&nbsp;getImage='Button_GetSmallImage'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getPressed='ItemIButton_IsPressed'&nbsp;onAction='ItemIButton_Click'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;screentip='No&nbsp;Forward'&nbsp;supertip='Prevent&nbsp;recipients&nbsp;within&nbsp;the&nbsp;same&nbsp;organisation&nbsp;from&nbsp;forwarding&nbsp;the&nbsp;invitation'</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label='Forward'&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/group&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&lt;/tab&gt;</span>
<span>&nbsp;&nbsp;&lt;/tabSet&gt;</span>
<span>&nbsp;&lt;/contextualTabs&gt;</span>
</pre>
<p>The handler methods are a little different to ones written previously. The handler is passed a reference to the control, via which I've found the currently viewed message using the explorer's current selection: this refers to the message being responded to (as evidenced by my prior explorer ribbon controls). Instead, I need to make use of another new feature to get hold of the message being composed, the <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/jj231535(v=office.15).aspx">ActiveInlineResponse property</a>. Once I've got the item, the processing is just the same as described in <a title="Blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/27/other-ribbons.aspx">previous</a> <a title="Blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/20/more-buttons.aspx">posts</a>.</p>
<p>Yet another wrinkle to deal with is that Outlook 2010 (and earlier) know nothing about this TabMessage and will complain if I use the XML above (albeit fairly quietly - you only see UI errors if you ask for them in Outlook's advanced options page). The "fix" is yet another version check to choose this new XML or the old copy without the contextual tabs section.</p>
<p>And that's it. I've got inline response ribbon support now - but not so fast! When the user clicks reply, the inline response ribbon controls appear, and my InlineResponse event handler kicks in to cause the controls to update their state correctly. When the user dismisses the inline response (by whichever of the three methods mentioned above), the new controls vanish without me having to do anything clever. Unfortunately, however, the buttons don't actually do anything... According to the <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/jj231535.aspx">ActiveInlineResponse page</a>, I should be able to inspect and manipulate the no-reply, etc. actions associated with the inline response - it turns out that that's not actually true: it is not possible to access <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff861914.aspx">MailItem.Actions</a> at all for an inline response. (I believe that the MSDN page will be updated soon, with the correct information.) The upshot of this is that while I can indeed correctly display and react to buttons specific to inline responses, I can't use them to manipulate reply-all, etc.</p>
<p>So, no inline response support for the <a title="Project home page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">NoReplyAll Add-in</a>, alas, unless I can come up with some way to capture button states and attach them to the message when it's being sent (assuming I can manipulate Actions there)...</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10338843" width="1" height="1">
]]>
		</document>
		<document id="1f7996c24ec3015b424e6a76675b81a1" url="http://blogs.msdn.com/b/gsmyth/archive/2012/10/06/is-your-quot-new-quot-menu-too-long.aspx"><![CDATA[<p>Something that I find annoying is how many programs add items to the Windows Explorer "New" submenu ("New item" on the Windows 8 Explorer ribbon, or right click in the Explorer window and select "New") that I really never, or very seldom, want to create directly. All this noise gets in the way of the few items I do want to quickly access from there. Now, it's possible to remove these extra items via RegEdit but recently I've been doing a lot of OS installs and it's a chore to repeat the edits manually. If you've got an itch, scratch it... So I decided to write a little tool to do the editing for me, and here it is.</p>
<p>First, a little bit about the relevant registry items: under HKEY_CLASSES_ROOT there are subkeys for each recognised file suffix, below that there are several more, one of which may have a ShellNew key. If that key is non-empty, then Windows Explorer populates an entry in the new items menu for the appropriate file type. If you delete (or empty out) the ShellNew key, the menu entry no longer appears. Deleting is a bit drastic, and renaming ShellNew to something else lets you get the entry back if you've changed your mind. (Actually, there are other means of getting items on to that menu, but I'm only interested in these ones since they correspond to the entries I'm most interested in manipulating - to be honest, I've not gone looking for the others. Please note that this has all been gleaned from exploring the registry - I don't think this stuff is documented formally. As most articles involving registry editing say, erroneous changes could break things and the risk is yours!</p>
<p>The utility I'm going to outline here iterates over all of the HKEY_CLASSES_ROOT subkeys looking for non-empty ShellNew, or for XShellNew (which is the not very imaginative name I've chosen to use to indicate "deleted" ShellNew keys), and presents them as a list of checkboxes to be disabled or re-enabled, respectively. Here's the routine for populating my list (ListItems is a CheckedListBox):</p>
<p>private void PopulateList()<br />{<br />&nbsp;&nbsp;&nbsp; using (var classRoot = Registry.ClassesRoot)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var typeName in classRoot.GetSubKeyNames())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var type = classRoot.OpenSubKey(typeName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var subkeyName in type.GetSubKeyNames())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var subkey = type.OpenSubKey(subkeyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var shellNew = subkey.OpenSubKey("ShellNew"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var xshellNew = subkey.OpenSubKey("XShellNew"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool enabled = shellNew != null &amp;&amp; shellNew.GetValueNames().Length &gt; 0;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (enabled || xshellNew != null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ListItems.Items.Add(new SuffixDetails { Suffix = typeName, Subkey = subkeyName }, enabled);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
<p>SuffixDetails is a class containing two string fields (Suffix and Subkey) and a ToString override which returns just the suffix, to be used for display in the ListBox.</p>
<p>The list box&nbsp;has an Itemcheck event handler which either renames ShellNew to XShellNew or vice versa depending on whether the item has been unchecked or checked.</p>
<p>private void ListItems_ItemCheck(object sender, ItemCheckEventArgs e)<br />{<br />&nbsp;&nbsp;&nbsp; var item = this.ListItems.Items[e.Index] as SuffixDetails;<br />&nbsp;&nbsp;&nbsp; bool enable = e.NewValue == CheckState.Checked;</p>
<p>&nbsp;&nbsp;&nbsp; using (var key = Registry.ClassesRoot.OpenSubKey(item.Suffix))<br />&nbsp;&nbsp;&nbsp; using (var subkey = key.OpenSubKey(item.Subkey, true))<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string fromKeyName = enable ? "XShellNew" : "ShellNew";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string toKeyName = enable ? "ShellNew" : "XShellNew";<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; subkey.RenameSubKey(fromKeyName, toKeyName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception ex)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(string.Format("Error {0}abling '{1}/{2}'", enable ? "en" : "dis", item.Suffix, item.Subkey),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New Item Squasher", MessageBoxButtons.OK, MessageBoxIcon.Error);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
<p>Now, RegistryKey doesn't actually have a RenameSubKey method - and the registry doesn't support renaming anyway. This is an extension method which recursively copies one subkey to another, and then (assuming no errors) deletes the first. Note that if the destination subkey already exists, this adds to or overwrites that - that seems reasonable in this case, but perhaps an error should be thrown in other applications of this "renaming" facility. (Overwriting is helpful here since Windows Update patches frequently re-introduce ShellNew keys for document types I'd previously disabled, and this lets me re-disable them by copying the new ShellNew over the old XShellNew without any errors.</p>
<p>The class below provides the registry manipulations. The copying is simply done recursively:</p>
<p>public static class RegistryExtensions<br />{<br />&nbsp;&nbsp;&nbsp; public static void RenameSubKey(this RegistryKey key, string fromSubKeyName, string toSubKeyName)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var toKey = key.OpenSubKey(fromSubKeyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var fromKey = key.CreateSubKey(toSubKeyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RecursiveCopy(toKey, fromKey);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If there was an error, it'll throw an exception before here so we won't lose the source key...<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; key.DeleteSubKeyTree(fromSubKeyName);<br />&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; private static void RecursiveCopy(RegistryKey fromKey, RegistryKey toKey)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string fromSubKeyName in fromKey.GetSubKeyNames())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var fromSubKey = fromKey.OpenSubKey(fromSubKeyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (var toSubKey = toKey.CreateSubKey(fromSubKeyName))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RecursiveCopy(fromSubKey, toSubKey);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string valueName in fromKey.GetValueNames())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var value = fromKey.GetValue(valueName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var kind = fromKey.GetValueKind(valueName);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toKey.SetValue(valueName, value, kind);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}</p>
<p>The only other thing of interest in the application is that it must run elevated (standard users can't write into HKEY_CLASSES_ROOT) and the easiest way to guarantee that is to add a manifest to the project (available directly in the add new item Visual Studio wizard), and set the requestedExecutionLevel to requireAdministrator. This will cause the application to elevate (or prompt for elevation) when it starts.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10341428" width="1" height="1">
]]>
		</document>
		<document id="28959774da0ae91699bc25a63ee7a2e1" url="http://blogs.msdn.com/b/gsmyth/archive/2012/11/10/doppler-one.aspx"><![CDATA[<p><a title="Chris Bishop home page" href="http://research.microsoft.com/en-us/um/people/cmbishop/index.htm">Professor Chris Bishop</a> is well known round here for giving entertaining science talks aimed at young people - a few years ago he presented the <a title="Chris Bishop outreach" href="http://research.microsoft.com/en-us/um/people/cmbishop/outreach.htm">Royal Institution Christmas Lectures</a>. Every so often Chris pops into my office to talk about a bit of software for a particular demo he wants to show - these are normally very simple bits of software, intended to illustrate some particular idea in a very clean and clear way, and one such application is the "doppler demonstrator" I'll describe here.</p>
<p>The basic idea is to have a small blob traverse the screen, emitting circular growing "waves" as it goes. When the blob is stationary, the screen looks a bit like ripples spreading from a stone dropped in a pond; when the blob moves, the wavefronts in the direction in which it's travelling are compressed and the wavefronts behind are spaced out further, indicating how, for example, sound frequency of an approaching car is higher than when it's moving away. (As the blob gets faster, it catches up with the leading wavefronts and breaks the "sound barrier.") Below is a picture of the program in action:</p>
<p style="text-align: center;"><a href="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/3107.filter.png"><img src="http://blogs.msdn.com/resized-image.ashx/__size/550x0/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/3107.filter.png" alt="" border="0" /></a></p>
<p>(Actually, the version used in <a title="Explosive Science talk" href="http://research.microsoft.com/en-us/um/people/cmbishop/science.htm">the talk</a> had no title bar nor visible slider, but this'll do for the time being.)</p>
<p>There are many ways this could have been written but, being fairly lazy, I chose WPF. The main window Xaml definition is very short:</p>
<pre><span>&lt;</span><span>Window</span><span>&nbsp;x</span><span>:</span><span>Class</span><span>=</span><span>"Doppler.MainWindow"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;xmlns</span><span>=</span><span>"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;xmlns</span><span>:</span><span>x</span><span>=</span><span>"http://schemas.microsoft.com/winfx/2006/xaml"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;xmlns</span><span>:</span><span>local</span><span>=</span><span>"clr-namespace:Waves"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;WindowState</span><span>=</span><span>"Normal"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;Title</span><span>=</span><span>"Doppler"</span><span>&nbsp;Width</span><span>=</span><span>"1024"</span><span>&nbsp;Height</span><span>=</span><span>"768"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Grid</span><span>&nbsp;Background</span><span>=</span><span>"Black"</span><span>&nbsp;KeyUp</span><span>=</span><span>"Grid_KeyUp"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Viewbox</span><span>&nbsp;Stretch</span><span>=</span><span>"UniformToFill"</span><span>&nbsp;VerticalAlignment</span><span>=</span><span>"Center"</span><span>&nbsp;HorizontalAlignment</span><span>=</span><span>"Center"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Canvas</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"Surface"</span><span>&nbsp;Height</span><span>=</span><span>"600"</span><span>&nbsp;Width</span><span>=</span><span>"800"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Path</span><span>&nbsp;Fill</span><span>=</span><span>"Red"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Path.Data</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>EllipseGeometry</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"Source"</span><span>&nbsp;Center</span><span>=</span><span>"400,300"</span><span>&nbsp;RadiusX</span><span>=</span><span>"10"</span><span>&nbsp;RadiusY</span><span>=</span><span>"10"</span><span>&nbsp;/&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Path.Data</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Path</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Canvas</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Viewbox</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Slider</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"SliderSpeed"</span><span>&nbsp;Grid.Row</span><span>=</span><span>"0"</span><span>&nbsp;VerticalAlignment</span><span>=</span><span>"Bottom"</span><span>&nbsp;Margin</span><span>=</span><span>"10"</span><span>&nbsp;Orientation</span><span>=</span><span>"Horizontal"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;Minimum</span><span>=</span><span>"0"</span><span>&nbsp;Maximum</span><span>=</span><span>"3"</span><span>&nbsp;LargeChange</span><span>=</span><span>"1"</span><span>&nbsp;SmallChange</span><span>=</span><span>"0.5"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;IsMoveToPointEnabled</span><span>=</span><span>"True"</span><span>&nbsp;Opacity</span><span>=</span><span>"0.5"</span><span>&nbsp;/&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Grid</span><span>&gt;</span>
<span>&lt;/</span><span>Window</span><span>&gt;</span>
</pre>
<p>The blob (the ellipse called "Source") moves across the containing canvas, which is squeezed into a view box such that it easily scales to any size of screen, and the slider at the bottom controls the speed. Movement is triggered by a timer, which executes the following every 100th of a second:</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>void</span>&nbsp;Tick(<span>object</span>&nbsp;sender,&nbsp;EventArgs&nbsp;e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;x&nbsp;=&nbsp;<span>this</span>.Source.Center.X;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;+=&nbsp;<span>this</span>.SliderSpeed.Value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(x&nbsp;&gt;&nbsp;<span>this</span>.Surface.Width)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>else</span>&nbsp;<span>if</span>&nbsp;(x&nbsp;&lt;&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;<span>this</span>.Surface.Width&nbsp;-&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.Source.Center&nbsp;=&nbsp;<span>new</span>&nbsp;Point(x,&nbsp;<span>this</span>.Source.Center.Y);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(++period&nbsp;&gt;&nbsp;12)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;period&nbsp;=&nbsp;0;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateWave(<span>this</span>.Source.Center);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateWave(<span>new</span>&nbsp;Point((<span>this</span>.Source.Center.X&nbsp;-&nbsp;<span>this</span>.Surface.Width),&nbsp;<span>this</span>.Source.Center.Y));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
<p>Move the blob right some amount taken from the slider, wrapping at the right edge. Every so often, emit a new ripple via CreateWave. Why two waves? I want the display to look as if everything's wrapped, not just the red blob, so I pretend there's another wave emitting source a screen width behind this one; as wavefronts expand off the right, wavefronts from this extra phantom blob come is at exactly the right place on the left.</p>
<p>CreateWave is fairly straightforward, but a bit fiddly. I set up some WPF animations to take care of the wavefront expanding without me having to control them step by step. (I did wonder if I could do the same for the blob motion, but couldn't come up with a clean solution in the few hours I gave myself to write this app.)</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>void</span>&nbsp;CreateWave(Point&nbsp;c)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;wave&nbsp;=&nbsp;<span>new</span>&nbsp;Path
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stroke&nbsp;=&nbsp;Brushes.White,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;=&nbsp;<span>new</span>&nbsp;EllipseGeometry&nbsp;{&nbsp;Center&nbsp;=&nbsp;c&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.Surface.Children.Insert(0,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waves.Add(wave);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;d&nbsp;=&nbsp;<span>new</span>&nbsp;Duration(TimeSpan.FromSeconds(2));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sb&nbsp;=&nbsp;<span>new</span>&nbsp;Storyboard&nbsp;{&nbsp;Duration&nbsp;=&nbsp;d&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>const</span>&nbsp;<span>double</span>&nbsp;max&nbsp;=&nbsp;200;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sizeAnimX&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation(11,&nbsp;max,&nbsp;d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(sizeAnimX);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(sizeAnimX,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(sizeAnimX,&nbsp;<span>new</span>&nbsp;PropertyPath(<span>"(Path.Data).(EllipseGeometry.RadiusX)"</span>));
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sizeAnimY&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation(11,&nbsp;max,&nbsp;d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(sizeAnimY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(sizeAnimY,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(sizeAnimY,&nbsp;<span>new</span>&nbsp;PropertyPath(<span>"(Path.Data).(EllipseGeometry.RadiusY)"</span>));
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;strokeAnim&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation(5,&nbsp;9,&nbsp;d);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(strokeAnim);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(strokeAnim,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(strokeAnim,&nbsp;<span>new</span>&nbsp;PropertyPath(<span>"StrokeThickness"</span>));
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;opacityAnim&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimationUsingKeyFrames();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame(0.7,&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(0))));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame(0.6,&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(1.8))));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame(0.0,&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(2))));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(opacityAnim);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(opacityAnim,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(opacityAnim,&nbsp;<span>new</span>&nbsp;PropertyPath(<span>"Opacity"</span>));
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Completed&nbsp;+=&nbsp;(sender,&nbsp;e)&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;w&nbsp;=&nbsp;<span>this</span>.waves[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.waves.RemoveAt(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.Surface.Children.Remove(w);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Begin();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
<p>The important features here are the first couple of animations, growing the wave horizontally and vertically. The other critical parts of the routine are adding the wave to the canvas (note, inserted at the beginning, so that the red blob stays on top) and the storyboard completion handler to remove the no longer required wave. I couldn't figure out an easy way to identify the wave from the event arguments, so have a separate list of waves - I know that the expiring one is the first on this list, since they're appended in the order in which they're created.</p>
<p>The rest of the animations here (wave thickness, opacity and, in earlier versions, colour) are the result of Chris and I trying various ideas to see what looked good on a projector screen. The result of the application is shown below.</p>
<p style="text-align: center;"><a href="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/4274.nofilter.png"><img src="http://blogs.msdn.com/resized-image.ashx/__size/550x0/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/4274.nofilter.png" alt="" border="0" /></a></p>
<p>If you look carefully, you'll notice that this is quite different to the first picture: the lines are all much sharper. We did want something smoother, and adding a blur effect to the canvas almost did the right thing. However, we also really wanted to exaggerate the sound barrier breaking brightness, so I wrote a custom effect which did a little blurring and then increased the contrast a lot. The canvas Xaml fragment was modified to:</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Canvas</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"Surface"</span><span>&nbsp;Height</span><span>=</span><span>"600"</span><span>&nbsp;Width</span><span>=</span><span>"800"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Path</span><span>&nbsp;Fill</span><span>=</span><span>"Red"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Path.Data</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>EllipseGeometry</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"Source"</span><span>&nbsp;Center</span><span>=</span><span>"400,300"</span><span>&nbsp;RadiusX</span><span>=</span><span>"10"</span><span>&nbsp;RadiusY</span><span>=</span><span>"10"</span><span>&nbsp;/&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Path.Data</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Path</span><span>&gt;</span>
<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Canvas.Effect&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:ContrastEffect&nbsp;/&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Canvas.Effect&gt;</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;/</span><span>Canvas</span><span>&gt;</span>
</pre>
<p>The new bit (in bold) refers to the custom effect. There are numerous shader tutorials on the internet, such as this <a title="CodeProject shader effect article" href="http://www.codeproject.com/Articles/71617/Getting-Started-with-Shader-Effects-in-WPF">particularly good one</a>&nbsp;so I won't waste time talking about how to define a customshader to use in WPF. However, below is the short fragment of HLSL which I used:</p>
<pre><span>sampler2D</span>&nbsp;implicitInput&nbsp;:&nbsp;<span>register</span>(s0);
<span>float4</span>&nbsp;main(<span>float2</span>&nbsp;uv&nbsp;:&nbsp;TEXCOORD)&nbsp;:&nbsp;COLOR&nbsp;
{
	<span>float2</span>&nbsp;sampleOffsets[9]&nbsp;=
	{
	&nbsp;&nbsp;&nbsp;0,0,&nbsp;-1,0,&nbsp;1,0,&nbsp;0,-1,&nbsp;0,1,&nbsp;-1,-1,&nbsp;-1,1,&nbsp;1,-1,&nbsp;1,&nbsp;1
	};
 
	<span>float</span>&nbsp;scales[9]&nbsp;=
	{
	&nbsp;&nbsp;1,&nbsp;0.8,&nbsp;0.8,&nbsp;0.8,&nbsp;0.8,&nbsp;0.7,&nbsp;0.7,&nbsp;0.7,&nbsp;0.7
	};
 
	<span>//&nbsp;Very&nbsp;crude&nbsp;and&nbsp;simplistic&nbsp;blur</span>
	<span>float4</span>&nbsp;c&nbsp;=&nbsp;0;
	<span>for</span>(<span>int</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;9;&nbsp;++i)
		c&nbsp;+=&nbsp;scales[i]&nbsp;*&nbsp;tex2D(implicitInput,&nbsp;uv&nbsp;+&nbsp;0.001&nbsp;*&nbsp;sampleOffsets[i]);
	c&nbsp;/=&nbsp;7;
	c&nbsp;=&nbsp;saturate(c);
 
	<span>//&nbsp;Increase&nbsp;the&nbsp;contrast&nbsp;greatly</span>
	<span>float4</span>&nbsp;c0&nbsp;=&nbsp;c&nbsp;*&nbsp;c&nbsp;*&nbsp;c;
	c0.a&nbsp;=&nbsp;c.a;
 
	<span>return</span>&nbsp;c0;
}</pre>
<p>The first part is a simple blur: add fractions of pixels neighbouring the target one, and average - smooths the texture a little. The last few lines really boost the contrast, such that bright colours (as with overlapping waves) really stand out, as you can see in the top image.</p>
<p>And that's it. Now, one question is: why am I bothering to describe this quite old and really very simple application? Well, it's been a month since I last posed and I needed to show that I was still alive! Nonono - the reason is that I'm starting to write some modern Windows apps, and thought that something like this would be interesting to port, to be covered in the next post or two...</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10367454" width="1" height="1">
]]>
		</document>
		<document id="95867ac48d265dcab9aa9f5590e63a64" url="http://blogs.msdn.com/b/gsmyth/archive/2012/11/29/research-next.aspx"><![CDATA[<p><a title="Research Next event page" href="http://research.microsoft.com/en-us/events/researchnext/">Research Next</a> is a chance for us at <a title="Cambridge home page" href="http://research.microsoft.com/en-us/labs/cambridge/default.aspx">Microsoft Research Cambridge</a> to show off some of the work we do - <a title="Project Colletta home page" href="http://research.microsoft.com/en-us/um/cambridge/projects/ResearchDesktop/ProjectColletta/default.htm">Project Colletta</a> gets a brief <a title="Project Colletta video" href="http://research.microsoft.com/apps/video/?id=177026">outing</a>&nbsp;at the most recent, held a couple of weeks ago. If you look carefully, you'll see that it's working with Office 2013 now - release coming soon (I hope), and we're extending it to work across devices too.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10373027" width="1" height="1">
]]>
		</document>
		<document id="ab71ae501dcdab2007bcadf63ea806b2" url="http://blogs.msdn.com/b/gsmyth/archive/2012/12/30/doppler-two.aspx"><![CDATA[<p><a title="Blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2012/11/10/doppler-one.aspx">Last time</a>, I talked about a WPF application to demonstrate the&nbsp;Doppler&nbsp;effect; this time I'm going to look at a Win8 app. The starting point is the C# Windows Store application project template, of course, and then almost exactly the same Xaml content as before. The one and only change is that Win8 apps don't support bitmap effects, custom or otherwise, so the contrast enhancing blur from last time isn't available in this version.</p>
<p>There are a few small changes in the C# code, to deal with variations in the animation and timer APIs - this application isn't doing anything with files, streams, etc. so there are no synchronous to asynchronous changes, just these minor tweaks. To begin, the DispatcherTimer constructor is different; instead of calling a multi-parameter constructor to set it all up, I have this collection of lines:</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.timer&nbsp;=&nbsp;<span>new</span>&nbsp;DispatcherTimer{&nbsp;Interval&nbsp;=&nbsp;TimeSpan.FromSeconds(0.01)&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.timer.Tick&nbsp;+=&nbsp;Tick;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.timer.Start();
</pre>
<p>There are similar small scale tweaks to CreateWave:</p>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>void</span>&nbsp;CreateWave(Point&nbsp;c)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;wave&nbsp;=&nbsp;<span>new</span>&nbsp;Path
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stroke&nbsp;=&nbsp;brush,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data&nbsp;=&nbsp;<span>new</span>&nbsp;EllipseGeometry&nbsp;{&nbsp;Center&nbsp;=&nbsp;c&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.Surface.Children.Insert(0,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;waves.Add(wave);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;d&nbsp;=&nbsp;<span>new</span>&nbsp;Duration(TimeSpan.FromSeconds(2));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sb&nbsp;=&nbsp;<span>new</span>&nbsp;Storyboard&nbsp;{&nbsp;Duration&nbsp;=&nbsp;d&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>const</span>&nbsp;<span>double</span>&nbsp;max&nbsp;=&nbsp;200;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sizeAnimX&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation&nbsp;{&nbsp;From&nbsp;=&nbsp;11,&nbsp;To&nbsp;=&nbsp;max,&nbsp;Duration&nbsp;=&nbsp;d,&nbsp;EnableDependentAnimation&nbsp;=&nbsp;<span>true</span>&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(sizeAnimX);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(sizeAnimX,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(sizeAnimX,&nbsp;<span>"(Path.Data).(EllipseGeometry.RadiusX)"</span>);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;sizeAnimY&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation&nbsp;{&nbsp;From&nbsp;=&nbsp;11,&nbsp;To&nbsp;=&nbsp;max,&nbsp;Duration&nbsp;=&nbsp;d,&nbsp;EnableDependentAnimation&nbsp;=&nbsp;<span>true</span>&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(sizeAnimY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(sizeAnimY,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(sizeAnimY,&nbsp;<span>"(Path.Data).(EllipseGeometry.RadiusY)"</span>);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;strokeAnim&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimation&nbsp;{&nbsp;From&nbsp;=&nbsp;5,&nbsp;To&nbsp;=&nbsp;9,&nbsp;Duration&nbsp;=&nbsp;d,&nbsp;EnableDependentAnimation&nbsp;=&nbsp;<span>true</span>&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(strokeAnim);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(strokeAnim,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(strokeAnim,&nbsp;<span>"StrokeThickness"</span>);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;opacityAnim&nbsp;=&nbsp;<span>new</span>&nbsp;DoubleAnimationUsingKeyFrames&nbsp;{&nbsp;EnableDependentAnimation&nbsp;=&nbsp;<span>true</span>&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame&nbsp;{&nbsp;Value&nbsp;=&nbsp;0.7,&nbsp;KeyTime&nbsp;=&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(0))&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame&nbsp;{&nbsp;Value&nbsp;=&nbsp;0.6,&nbsp;KeyTime&nbsp;=&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(1.8))&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opacityAnim.KeyFrames.Add(<span>new</span>&nbsp;LinearDoubleKeyFrame&nbsp;{&nbsp;Value&nbsp;=&nbsp;0.0,&nbsp;KeyTime&nbsp;=&nbsp;KeyTime.FromTimeSpan(TimeSpan.FromSeconds(2))&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Children.Add(opacityAnim);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTarget(opacityAnim,&nbsp;wave);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storyboard.SetTargetProperty(opacityAnim,&nbsp;<span>"Opacity"</span>);
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Completed&nbsp;+=&nbsp;(sender,&nbsp;e)&nbsp;=&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>var</span>&nbsp;w&nbsp;=&nbsp;<span>this</span>.waves[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.waves.RemoveAt(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span>.Surface.Children.Remove(w);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Begin();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
<p>At the end of this, I have something that looks like the non-blurred version of the WPF application, except that it runs realllllyyyyy reaaallllllyyyyyy slowly. In fact, adding a bit of time keeping to the timer tick routine shows that it's being called a lot less than 100 times a second - even changing the timeout to be much shorter has little effect, suggesting that something is causing the foreground thread (the UI one) to stall - probably all those heavyweight animations. Anyway, even at a slow speed, it's pretty obvious that the lack of blur effect makes this a very poor variant of the program, so I'll not put much time into investigating the speed issues at the moment.</p>
<p>It looks like the only way to get something effect-like is to switch to DirectX, which means brushing up on my C++ a bit. Next time...</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10369645" width="1" height="1">
]]>
		</document>
		<document id="eab8f1baaec6f8d691f6a0f080270942" url="http://blogs.msdn.com/b/gsmyth/archive/2013/01/27/wix-installer-for-vsto-projects.aspx"><![CDATA[<p>A few people have been asking me for something akin to an MSI-based installer for my <a title="NoReplyAll project page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">NoReplyAll</a> tool but I've not been able to treat this as particularly high priority. Those of you with Office 2013 might have noticed Outlook pointing the finger of shame at add-ins which take what it deems to be too long to start up and, alas, NoReplyAll is one of those. I knew the add-in was doing almost nothing at startup, and a brief performance analysis showed up nothing. What was worse, when I ran the project with a temporary signing key, it started promptly, but the deployed version signed with Microsoft's key was slow. I stumbled across this <a title="Blog post" href="http://blogs.msdn.com/b/vsod/archive/2012/05/19/resolving-performance-issues-with-loading-office-add-ins-vsto-add-ins-or-shared-add-ins.aspx">VSOD blog post</a> which had a few suggestions; to cut a long story short, the change that had most effect was to use&nbsp;<a title="Blog post" href="http://blogs.msdn.com/b/vsto/archive/2010/11/30/performance-improvements-coming-soon-to-a-service-pack-near-you-stephen-peters.aspx">VSTO fast path</a>... And that boils down to having the add-in installed under %ProgramFiles%, which means I've now got a much stronger need for an MSI installer.&nbsp;As it happens, it's also the case that Visual Studio 2012 removed the simple (and limited) installer builder, so I thought I'd treat this as an exercise in learning <a title="WiX home page" href="http://wixtoolset.org/">WiX</a>.</p>
<p>When you install WiX, you get a bunch of new project types: the first of interest here is the "Setup Project" - this groups together output of other projects into a MSI file (there are other options, but this is what I was interested in). The first step is to add references into the WiX project for the projects to incorporate, but there's a small snag. For other project types that I've tried, the WiX UI in Visual Studio does this just fine, but the UI for adding references doesn't seem to recognise VSTO projects at all. However, WiX does understand the dependency, it's just the UI that doesn't, so you can add the project reference by hand. If you open the .wixproj file in a text editor, references to other projects (and WiX libraries) appear directly after this block (as you'll see if you happen to have any other references):</p>
<pre>  &lt;ItemGroup&gt;<br />    &lt;Compile Include="Product.wxs" /&gt;<br />  &lt;/ItemGroup&gt;</pre>
<p>If my NoReplyAll project happened to live in a sibling directory to the WiX project, I could add an ItemGroup like the following:</p>
<pre>  &lt;ItemGroup&gt;<br />    &lt;ProjectReference Include="..NoReplyAllNoReplyAll.csproj"&gt;<br />      &lt;Name&gt;NoReplyAll&lt;/Name&gt;<br />      &lt;Project&gt;{04646315-0BAE-450D-A972-C2C095E040F6}&lt;/Project&gt;<br />      &lt;Private&gt;True&lt;/Private&gt;<br />      &lt;DoNotHarvest&gt;True&lt;/DoNotHarvest&gt;<br />      &lt;RefProjectOutputGroups&gt;Binaries;Content;Satellites&lt;/RefProjectOutputGroups&gt;<br />      &lt;RefTargetDir&gt;INSTALLFOLDER&lt;/RefTargetDir&gt;<br />    &lt;/ProjectReference&gt;<br />  &lt;/ItemGroup&gt;</pre>
<p>The &lt;Project&gt; GUID can be found in the NoReplyAll.csproj file or in the solution file referencing both projects.</p>
<p>You can, of course, use WiX without a project reference, but the reference lets you use some convenient WiX variables and, more importantly, build dependencies will be handled automatically.</p>
<p>The core of a WiX project is a bunch of components (defining things - files, registry settings, etc. - to be installed) and features (to determine which components to install). There are many ways to organise a WiX project into separate sections or files but I lobbed everything in one bucket for this small project. My Product.wxs components and single feature look like:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Directory</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>TARGETDIR</span>"<span>&nbsp;</span><span>Name</span><span>=</span>"<span>SourceDir</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Directory</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>ProgramFilesFolder</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Directory</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>INSTALLFOLDER</span>"<span>&nbsp;</span><span>Name</span><span>=</span>"<span>NoReplyAll</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_AddIn</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>File</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>FILE_AddIn</span>"<span>&nbsp;</span><span>Source</span><span>=</span>"<span>$(var.NoReplyAll.TargetPath)</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_DllManifest</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>File</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>FILE_DllManifest</span>"<span>&nbsp;</span><span>Source</span><span>=</span>"<span>$(var.NoReplyAll.TargetPath).manifest</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_VstoManifest</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>File</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>FILE_VstoManifest</span>"<span>&nbsp;</span><span>Source</span><span>=</span>"<span>$(var.NoReplyAll.TargetDir)$(var.NoReplyAll.TargetName).vsto</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryKey</span><span>&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SoftwareMicrosoftOfficeOutlookAddinsNoReply</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>Description</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>NoReplyAll&nbsp;Add-In</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>string</span>"<span>&nbsp;</span><span>Action</span><span>=</span>"<span>write</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>FriendlyName</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>NoReplyAll</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>string</span>"<span>&nbsp;</span><span>Action</span><span>=</span>"<span>write</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>LoadBehavior</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>3</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>integer</span>"<span>&nbsp;</span><span>Action</span><span>=</span>"<span>write</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>Manifest</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>[#FILE_VstoManifest]|vstolocal</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>string</span>"<span>&nbsp;</span><span>Action</span><span>=</span>"<span>write</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>RegistryKey</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_ToolsCommon</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>File</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>FILE_ToolsCommon</span>"<span>&nbsp;</span><span>Source</span><span>=</span>"<span>$(var.NoReplyAll.TargetDir)Microsoft.Office.Tools.Common.v4.0.Utilities.dll</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_ToolsOutlook</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>File</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>FILE_ToolsOutlook</span>"<span>&nbsp;</span><span>Source</span><span>=</span>"<span>$(var.NoReplyAll.TargetDir)Microsoft.Office.Tools.Outlook.v4.0.Utilities.dll</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Directory</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Directory</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Directory</span><span>&gt;</span>
 
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Feature</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>ProductFeature</span>"<span>&nbsp;</span><span>Title</span><span>=</span>"<span>NoReplyAll</span>"<span>&nbsp;</span><span>Level</span><span>=</span>"<span>1</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ComponentRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_AddIn</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ComponentRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_DllManifest</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ComponentRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_VstoManifest</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ComponentRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_ToolsCommon</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ComponentRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_ToolsOutlook</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Feature</span><span>&gt;</span>
</pre>
<p>The files are those that appear in the bin directory when you build the VSTO add-in, and the registry settings are those defined in <a title="VSTO registry MSDN page" href="http://msdn.microsoft.com/en-us/library/bb386106.aspx">this MSDN page</a>. Note that I've placed the registry items under HKLM (rather than the HKCU that ClickOnce favours) - that seemed sensible since the files are going into a machine-wide location rather than user space, but could cause a problem with people who have Office 2007 since that doesn't look for add-ins under HKLM by default, but can be persuaded to via <a title="VSTO support page" href="http://support.microsoft.com/kb/976811/en-us">another registry setting</a>.</p>
<p>Rather than require users to set this value, we can add it to the installer: another component (not forgetting the ComponentRef in the feature element).</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_Office2007Hklm</span>"<span>&nbsp;</span><span>Permanent</span><span>=</span>"<span>yes</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryKey</span><span>&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SoftwareMicrosoftOffice12.0CommonGeneral</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>EnableLocalMachineVSTO</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>1</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>integer</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>RegistryKey</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
</pre>
<p>We could make this conditional on detection of Outlook 2007, since there's no need for it otherwise. (There's also no harm - other than annoying untidiness - in adding this registry key unconditionally.) To make it conditional, we first need a flag to test, defined as the following:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Property</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>OFFICE2007</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistrySearch</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>Office2007_Installed</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SoftwareMicrosoftOffice12.0OutlookInstallRoot</span>"<span>&nbsp;</span><span>Name</span><span>=</span>"<span>Path</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>raw</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Property</span><span>&gt;</span>
</pre>
<p>There may be other ways to detect the presence of Outlook 2007, but this does appear to work - it might falsely trigger on machines which have had Office 2007 and then were upgraded to a newer Office, but I've not been able to examine any such machines to check. Once that variable's defined, the component above can be extended as shown in bold below:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Component</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>CMP_Office2007Hklm</span>"<span>&nbsp;</span><span>Permanent</span><span>=</span>"<span>yes</span>"<span>&gt;</span>
<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Condition&gt;&lt;![CDATA[OFFICE2007]]&gt;&lt;/Condition&gt;</strong>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryKey</span><span>&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SoftwareMicrosoftOffice12.0CommonGeneral</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistryValue</span><span>&nbsp;</span><span>Name</span><span>=</span>"<span>EnableLocalMachineVSTO</span>"<span>&nbsp;</span><span>Value</span><span>=</span>"<span>1</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>integer</span>"<span>&nbsp;</span><span>KeyPath</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>RegistryKey</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Component</span><span>&gt;</span>
</pre>
<p>If you compile this, you'll end up with a MSI file - and a few others. You need to tell WiX to combine everything with an EmbedCab attribute to tell WiX to put everything in one file:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>MediaTemplate</span><span>&nbsp;</span><span>EmbedCab</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
</pre>
<p>Now you'll end up with a single MSI file, and double clicking it will install the add-in. No UI though, and no checking that you have the necessary prerequisites (viz, .NET and the VSTO runtime). Adding a UI is easy: add a reference to WiXUIExtension, and then the following line to the end of the product element in Product.wxs:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>UIRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>WixUI_Minimal</span>"<span>/&gt;</span>
</pre>
<p>That was easy! You can set variables to tweak the UI or add a license, but that's the core.</p>
<p>Prerequisite checking is similar to the condition checking above. Some commonly used items have been prepared by the WiX authors already, such as .NET. My prerequisite checking section looks like:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>PropertyRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>NETFRAMEWORK40CLIENT</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Condition</span><span>&nbsp;</span><span>Message</span><span>=</span>"<span>This&nbsp;tool&nbsp;requires&nbsp;.NET&nbsp;Framework&nbsp;4.0.&nbsp;Please&nbsp;install&nbsp;the&nbsp;.NET&nbsp;Framework&nbsp;then&nbsp;run&nbsp;this&nbsp;installer&nbsp;again.</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;![CDATA[</span><span>Installed&nbsp;OR&nbsp;NETFRAMEWORK40CLIENT</span><span>]]&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Condition</span><span>&gt;</span>
 
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Property</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>VSTOR40</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>RegistrySearch</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>VSTOR_Installed</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SOFTWAREMicrosoftVSTO&nbsp;Runtime&nbsp;Setupv4R</span>"<span>&nbsp;</span><span>Name</span><span>=</span>"<span>VSTORFeature_CLR40</span>"<span>&nbsp;</span><span>Type</span><span>=</span>"<span>raw</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Property</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Condition</span><span>&nbsp;</span><span>Message</span><span>=</span>"<span>This&nbsp;tool&nbsp;requires&nbsp;the&nbsp;VSTO&nbsp;4.0&nbsp;Runtime.&nbsp;Please&nbsp;install&nbsp;the&nbsp;VSTO&nbsp;runtime&nbsp;then&nbsp;run&nbsp;this&nbsp;installer&nbsp;again.</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;![CDATA[</span><span>Installed&nbsp;OR&nbsp;(VSTOR40&nbsp;OR&nbsp;NOT&nbsp;OFFICE2007)</span><span>]]&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Condition</span><span>&gt;</span></pre>
<p>NETFRAMEWORK40CLIENT is defined in WixNetFxExtension, which needs to be added to project references, and notice that the VSTO runtime check includes a reference to Office 2007. The add-in works with Outlook 2007, 2010 and 2013: however, the runtime only needs to be installed for Office 2007, so there's no point in checking for it for the other versions of Office. Of course, I ought to include a check that the machine does in fact have one of those versions of Office installed but, hey, if you want to use an Outlook add-in on a machine without Outlook, you don't need me to tell you it's not going to work.</p>
<p>It's all fine checking for these prerequisites, but it would be nicer still to go out and grab them, and that's where another WiX project template comes into play, the Bootstrapper Project. As before the first thing to do is add project references - to the previously created setup proiect and, while you're there, to WiX packages WixBalExtension, WixNetFxExtension and WixUtilExtension. The bootstrapper Bundle.wxs file can be viewed as three separate chunks for this project. First comes the UI definition:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>BootstrapperApplicationRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>WixStandardBootstrapperApplication.RtfLicense</span>"<span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>bal:WixStandardBootstrapperApplication</span><span>&nbsp;</span><span>LicenseFile</span><span>=</span>"<span>mylicense.rtf</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>SuppressOptionsUI</span><span>=</span>"<span>yes</span>"<span>&nbsp;</span><span>LogoFile</span><span>=</span>"<span>logo.png</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>BootstrapperApplicationRef</span><span>&gt;</span>
</pre>
<p>I want a click through license to be shown so specify it here (it is possible to have no license, or to link to it instead of display on the install wizard), and the logo bitmap (64x64 pixels) appears on the top left of the window. As shown earlier, I used a registry search to look for Office 2007 and the VSTO runtime - I need to do the same here, but have to use a different mechanism:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>util:RegistrySearch</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>Office2007_Installed</span>"<span>&nbsp;</span><span>Variable</span><span>=</span>"<span>OFFICE2007</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SoftwareMicrosoftOffice12.0OutlookInstallRoot</span>"<span>&nbsp;</span><span>Result</span><span>=</span>"<span>exists</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>util:RegistrySearch</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>VSTOR_Installed</span>"<span>&nbsp;</span><span>Variable</span><span>=</span>"<span>VSTOR40</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>Root</span><span>=</span>"<span>HKLM</span>"<span>&nbsp;</span><span>Key</span><span>=</span>"<span>SOFTWAREMicrosoftVSTO&nbsp;Runtime&nbsp;Setupv4R</span>"<span>&nbsp;</span><span>Result</span><span>=</span>"<span>exists</span>"<span>&nbsp;/&gt;</span>
</pre>
<p>The final section is the "chain" of the two prerequisites and the MSI file:</p>
<pre><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>Chain</span><span>&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>PackageGroupRef</span><span>&nbsp;</span><span>Id</span><span>=</span>"<span>NetFx40Web</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>ExePackage</span><span>&nbsp;</span><span>SourceFile</span><span>=</span>"<span>vstor_redist.exe</span>"<span>&nbsp;</span><span>Permanent</span><span>=</span>"<span>yes</span>"<span>&nbsp;</span><span>Vital</span><span>=</span>"<span>yes</span>"<span>&nbsp;</span><span>Cache</span><span>=</span>"<span>no</span>"<span>&nbsp;</span><span>Compressed</span><span>=</span>"<span>no</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DownloadUrl</span><span>=</span>"<span>http://go.microsoft.com/fwlink/?LinkId=158917</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>InstallCommand</span><span>=</span>"<span>/q&nbsp;/norestart</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DetectCondition</span><span>=</span>"<span>VSTOR40</span>"
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>InstallCondition</span><span>=</span>"<span>OFFICE2007&nbsp;AND&nbsp;NOT&nbsp;VSTOR40</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>MsiPackage</span><span>&nbsp;</span><span>SourceFile</span><span>=</span>"<span>$(var.NoReplyAllAddInSetup.TargetPath)</span>"<span>&nbsp;</span><span>Vital</span><span>=</span>"<span>yes</span>"<span>&nbsp;/&gt;</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>Chain</span><span>&gt;</span></pre>
<p>The first child element is the very convenient .NET framework check, defined in WiXNetFxExtension; the second is for the VSTO runtime and, again, I've made it conditional on having Office 2007. Note that you do need to have a copy of vstor_redist in the project directory to be able to build, though there's no need to distribute it since the bootstrapper will use the supplied URL if it can't find the file locally. And the third element is the MSI previously built.</p>
<p>Build that, and you end up with a single executable which takes care of everything for you - very nice.</p>
<p>&nbsp;</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10383924" width="1" height="1">
]]>
		</document>
		<document id="114ee73f2066b0b31b5a9a6a1b939997" url="http://blogs.msdn.com/b/gsmyth/archive/2013/02/14/noreplyall-add-in-3-0.aspx"><![CDATA[<p>A new version of the <a title="Project page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">add-in</a> is now available. The significant change is in the installation process, from plain (and simple!) ClickOnce to MSI, as described in my last <a title="WiX blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2013/01/27/wix-installer-for-vsto-projects.aspx">post</a>.</p>
<p>The new version should load faster (for a start, Outlook 2013 doesn't wag a finger at it for taking a long time, at least not on any of the machines on which I've tested it), and deployment across users and multiple machines should be simpler.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10393613" width="1" height="1">
]]>
		</document>
		<document id="b726dabf85f5780bfa40ef183dd27dde" url="http://blogs.msdn.com/b/gsmyth/archive/2013/03/09/windows-phone-lockscreen.aspx"><![CDATA[<p>Windows Phone 8 brings with it the ability for a program to set the lockscreen picture; there are already a bunch of apps in the store that cycle through images (including the built in ability to grab pictures from the Bing home page) - however, none of those I've found so far were really usable with the pictures I had to hand... When you choose a picture for the lockscreen, the phone automatically darkens it a little, so that you can read the white text overlay (to see this in action, for example, create a completely white image and set it as the lockscreen background - it becomes a little bit dim. My pictures, though, are all a little bit busy as well, making it more effortful than I really want to read the lockscreen text and notifications. Now, I could manually touch up all my images before copying them to the phone but that's far too much like hard work - and <a title="Comic" href="http://xkcd.com/974">it's much more fun to write an app to do it instead</a>&nbsp;(and it's educational).</p>
<p>What I set out to do was create something to load selected images, darken the bottom third or so and a smidge at the top, where all the lockscreen text and notifications go, and then cycle through those images on the lockscreen: this involves making use of a <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh202942.aspx">background agent</a> and, of course, functionality for <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj206968.aspx">setting the lockscreen background</a>. Oh, and I also wanted to write it in a hurry and not worry too much about tidying up all the rough edges!</p>
<p>First, I'll deal with the image manipulation: the basic flow is to load an image from the pictures library on the phone, apply an opacity mask to darken parts of it (having placed the image on a black background), allow the user to tweak the amount of darkening, and then save it somewhere that can be used as the source of lockscreen background images - that final point is significant, because the lockscreen cannot be set directly to a file in the pictures library, but can take sources only from the app's resources or local file system. The Xaml below shows my image editing page, and the diagram that follows illustrates how the image layers fit together - ImagePicture at the bottom, then the opacity mask, and the overlay on the top (the slider isn't shown in the diagram).</p>
<pre>&lt;Grid x:Name="ContentPanel" Grid.Row="1" Margin="12,0,12,0"&gt;
  &lt;Viewbox&gt;
    &lt;Grid Background="Black" Width="480" Height="800"&gt;
      &lt;Viewbox Stretch="UniformToFill" HorizontalAlignment="Center" VerticalAlignment="Center"&gt;
        &lt;Image x:Name="ImagePicture"&gt;
          &lt;Image.OpacityMask&gt;
            &lt;LinearGradientBrush StartPoint="0.5,0.0" EndPoint="0.5,1.0"&gt;
              &lt;GradientStop Offset="0.0" Color="{Binding ElementName=SliderDarkness, Path=Value, Converter={StaticResource AlphaConverter}}" /&gt;
              &lt;GradientStop Offset="0.2" Color="Black" /&gt;
              &lt;GradientStop Offset="0.4" Color="Black" /&gt;
              &lt;GradientStop Offset="0.7" Color="{Binding ElementName=SliderDarkness, Path=Value, Converter={StaticResource AlphaConverter}}" /&gt;
            &lt;/LinearGradientBrush&gt;
          &lt;/Image.OpacityMask&gt;
        &lt;/Image&gt;
      &lt;/Viewbox&gt;
      &lt;Image HorizontalAlignment="Center" Source="Assets/overlay.png" /&gt;
    &lt;/Grid&gt;
  &lt;/Viewbox&gt;
  &lt;Grid HorizontalAlignment="Right"&gt;
    &lt;Grid.RowDefinitions&gt;
      &lt;RowDefinition Height="Auto" /&gt;
      &lt;RowDefinition /&gt;
    &lt;/Grid.RowDefinitions&gt;
    &lt;TextBlock Style="{StaticResource PhoneTextSmallStyle}" Text="Darkness" /&gt;
    &lt;Slider x:Name="SliderDarkness" Grid.Row="1" HorizontalAlignment="Center"
               Minimum="0.0" Maximum="255.0"
               Orientation="Vertical" Value="90" /&gt;
  &lt;/Grid&gt;
&lt;/Grid&gt;
</pre>
<p style="text-align: center;"><a href="http://blogs.msdn.com/cfs-file.ashx/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/8171.OverlayDiagram.png"><img src="http://blogs.msdn.com/resized-image.ashx/__size/550x0/__key/communityserver-blogs-components-weblogfiles/00-00-01-46-84/8171.OverlayDiagram.png" alt="" border="0" /></a></p>
<p>I found I needed the mix of ViewBoxes and Grids to get the picture to size correctly and align with the overlay. (I had expected to be able to use Stretch=UniformToFill on the image itself, but I always ended up with an unscaled chunk of image, don't know why.) The opacity of the mask is connected to the slider, and I've got a small converter to change the slider value into a Color as required in the mask:</p>
<pre>public sealed class NumberToAlphaColorConverter : IValueConverter
{
  public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
  {
    byte alpha = (byte)System.Convert.ToInt32(value);
    return System.Windows.Media.Color.FromArgb(alpha, 0, 0, 0);
  }

  public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
  {
    throw new NotImplementedException();
  }
}
</pre>
<p>On entry to this page, I fire up an image picker and, once that returns, set ImagePicture's source:</p>
<pre>private void PhotoChooser_Completed(object sender, PhotoResult e)
{
  if (e.TaskResult == TaskResult.OK)
  {
    var bmp = new BitmapImage { CreateOptions = BitmapCreateOptions.None };
    bmp.SetSource(e.ChosenPhoto);
    this.ImagePicture.Source = bmp;
  }
}
</pre>
<p>Once the user has set the darkness appropriately and hits OK, I need to persist this on-screen image to a file and, in order to display the smoothest gradient, I want to save the image at the same resolution as the screen - which isn't quite as obvious as it seems... Although Windows Phone 8 screens come in a number of pixel sizes, the operating system lies to the application and <a title="MSDN" href="http://msdn.microsoft.com/en-US/library/windowsphone/develop/jj206974.aspx">pretends it's always (close to) 800x480</a> , so I need to do a little digging to get the real size. The Importer class that follows does the heavy lifting, invoked via: importer.Import((BitmapImage)this.ImagePicture.Source, (byte)this.SliderDarkness.Value);</p>
<pre>internal class Importer
{
  internal Importer()
  {
    this. brush = new LinearGradientBrush
          {
            StartPoint = new Point(0.5, 0.0),
            EndPoint = new Point(0.5, 1.0),
            GradientStops = new GradientStopCollection
               {
                 new GradientStop { Offset = 0.0 },
                 new GradientStop { Offset = 0.2, Color = Colors.Black },
                 new GradientStop { Offset = 0.4, Color = Colors.Black },
                 new GradientStop { Offset = 0.7 }
               }
          };
    var ui = App.Current.Host.Content;
    int w = (int)(ui.ActualWidth * ui.ScaleFactor / 100), h = (int)(ui.ActualHeight * ui.ScaleFactor / 100);
    this.image = new Image
          {
            Width = w,
            Height = h,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center,
            Stretch = Stretch.UniformToFill,
            OpacityMask = this.brush
          };
    this.wbmp = new WriteableBitmap(w, h);
  }

  internal void Import(BitmapImage sourceImage, byte alpha)
  {
    using (var store = IsolatedStorageFile.GetUserStoreForApplication())
    {
      var darkness = Color.FromArgb(alpha, 0, 0, 0);
      brush.GradientStops[0].Color = brush.GradientStops[3].Color = darkness;
      this.image.Source = sourceImage;
      // Make sure the background is black before drawing the picture
      var pixels = wbmp.Pixels;
      for (int i = 0; i &lt; pixels.Length; ++i)
        pixels[i] = unchecked((int)0xFF000000);
      this.wbmp.Render(this.image, null);
      this.wbmp.Invalidate();

      string imageFileName = Guid.NewGuid().ToString() + ".jpg";
      using (var dest = new IsolatedStorageFileStream(imageFileName, FileMode.Create, store))
      {
        wbmp.SaveJpeg(dest, wbmp.PixelWidth, wbmp.PixelHeight, 0, 90);
      }
    }
  }

  private LinearGradientBrush brush;
  private Image image;
  private WriteableBitmap wbmp;
 }
</pre>
<p>This creates a layered structure similar to the Xaml for the screen, but (a) sets the image size to be the actual screen size in pixels (note use of <a title="MSDN" href="http://msdn.microsoft.com/en-US/library/windowsphone/develop/system.windows.interop.content.scalefactor.aspx">Content.ScaleFactor</a> above) and (b) spits the resulting image to a file in the application's private store via <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/system.windows.media.imaging.writeablebitmap.aspx">WriteableBitmap</a>. I do it as a two stage operation so that I can reuse the same resources for multiple images (see later) which is a lot lighter on instantaneous memory usage than creating an Image and WriteableBitmap every time. Note that this isn't a particularly efficient way to alphablend the image, but it is pretty close to the fewest lines of code and least thinking on my part!</p>
<p>Having got some images into the store, the next job is to get them on to the lockscreen - that's actually pretty easy, just a call to <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/windows.phone.system.userprofile.lockscreen.setimageuri.aspx">LockScreen.SetImageUri</a>. However, in order to be allowed to do this, the application must have requested permission from the user, which is a two step operation. First, the application manifest must include <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj206968.aspx#BKMK_Updatingtheapplicationmanifestfile">the lockscreen extension</a>:<br /><br />&lt;Extension ExtensionName="LockScreen_Background" ConsumerID="{111DFF24-AA15-4A96-8006-2BFF8122084F}" TaskID="_default" /&gt;<br /><br />Second, the application has to ask the user (and if the user denies permission, attempts to set the lockscreen background will fail). My main page's Loaded event handler includes the following:</p>
<pre>if (!LockScreenManager.IsProvidedByCurrentApplication)
  await LockScreenManager.RequestAccessAsync();
</pre>
<p>And the place where I set the lockscreen also checks that permission has been granted before performing the set:</p>
<pre>if (LockScreenManager.IsProvidedByCurrentApplication)
{
  using (var store = IsolatedStorageFile.GetUserStoreForApplication())
  {
    var images = store.GetFileNames("*.jpg");
    if (images.Length &gt; 0)
    {
      var imagePath = images[rand.Next(images.Length)];
      LockScreen.SetImageUri(new Uri("ms-appdata:///Local/" + imagePath, UriKind.Absolute));
    }
  }
}
</pre>
<p>(rand is a System.Random class member.)</p>
<p>Whew, almost there. Time to look at background agents. On Windows Phone, you can request that small bits of additional processing happens periodically. <a title="MSDN" href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/microsoft.phone.scheduler.periodictask.aspx">PeriodicTask</a> is one of the options and seems to run roughly every half hour or so. There's another ResourceIntensiveTask class which gets to do a bit more work, but is scheduled less often. (In fact, I couldn't get one of these to happen automatically over a few days to testing, so I reverted to PeriodicTask!) Note that normally background tasks silently expire after a couple of weeks if you don't use the associated application (the assumption being that if you don't use the app, you probably don't need the background agent) - however, lockscreen setting applications (and apps pinned to the start screen) get special dispensation on WP8 to keep on going. There are two parts to getting a background task to run (I seem to be saying a lot of things happen in two steps here - hmmm). First, we need the agent itself: this is a separate class library, with an object derived from ScheduledTaskAgent. Here's my unimaginatively named SceduledAgent:</p>
<pre>public class ScheduledAgent : ScheduledTaskAgent
{
  protected override void OnInvoke(ScheduledTask task)
  {
    ...the lockscreen background setting code from above...

    NotifyComplete();
  }
}
</pre>
<p>And the final step is to schedule the thing:</p>
<pre>private void StartScheduledTask()
{
  var t = ScheduledActionService.Find(ScheduledActionName) as ScheduledTask;
  if (t != null)
    ScheduledActionService.Remove(ScheduledActionName);
  if (LockScreenManager.IsProvidedByCurrentApplication)
  {
    t = new PeriodicTask(ScheduledActionName) { Description = "Change lock screen" };
    ScheduledActionService.Add(t);
  }
}
</pre>
<p>For tidyness I only want to schedule the task if the app is allowed to set the lockscreen background, hence the two-step (two again!) to remove the task and then only (re)schedule if permitted. Yes, I could optimise that a bit, but it works.</p>
<p>And that's pretty much all. Except for one extra little bit... It is a chore to set each image individually, wouldn't it be much more convenient to select an entire picture album? I've got another page in the app which lists all albums - the following code snippet populates the list:</p>
<pre>using (var library = new MediaLibrary())
{
  var albums = library.Pictures.GroupBy(p =&gt; p.Album).Select(g =&gt; g.Key);
  this.ListAlbums.ItemsSource = albums;
}
</pre>
<p>When the user selects an item from the list, I iterate over all pictures in the album, calling Import above:</p>
<pre>var album = (PictureAlbum)this.ListAlbums.SelectedItem;
foreach (var pic in album.Pictures)
{
  using (var stream = pic.GetImage())
  {
    var bmp = new BitmapImage { CreateOptions = BitmapCreateOptions.None };
    bmp.SetSource(stream);
    importer.Import(bmp, 90);
  }
  pic.Dispose();
}
</pre>
<p>Actually, that's a bit of a lie... Importing a large number of pictures can take quite a while, and the code above would lock the UI, so I handle the loop on a background thread. However, the WriteableBitmap processing must occur on the UI thread, so I end up marshalling each image back to the foreground - but at least the UI isn't frozen, and the user can cancel the operation if desired. The relevant code looks like this (with error handling removed for brevity):</p>
<pre>protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)
{
  // When leaving the page, cancel any import in progress
  this.cancel.Cancel();

  base.OnNavigatingFrom(e);
}

private async void ListAlbums_SelectionChangedAsync(object sender, SelectionChangedEventArgs e)
{
  var album = (PictureAlbum)this.ListAlbums.SelectedItem;
  if (album != null &amp;&amp; album.Pictures.Count &gt; 0)
  {
    this.PanelPleaseWait.Visibility = Visibility.Visible;
    await Task.Run(() =&gt;
       {
         ImportAlbum(album, this.cancel.Token);
       });
  }
  NavigationService.GoBack();
}

private static void ImportAlbum(PictureAlbum album, CancellationToken cancellationToken)
{
  var dsc = new DispatcherSynchronizationContext(App.RootFrame.Dispatcher);
  foreach (var pic in album.Pictures)
  {
    if (cancellationToken.IsCancellationRequested)
      return;

    dsc.Send((opic) =&gt;
       {
         using (var stream = pic.GetImage())
         {
           var bmp = new BitmapImage { CreateOptions = BitmapCreateOptions.None };
           bmp.SetSource(stream);
           importer.Import(bmp, 90);
         }
       }, null);
    pic.Dispose();
  }
}

private CancellationTokenSource cancel = new CancellationTokenSource();
</pre>
<p>And that's it. (There's still plenty more that could be done - allowing the user to scale the incoming images, crop them, even rotate them - but it happens that my images are all roughly the right shape - just the wrong colours!)</p>
<p>For anyone who's interested, <a title="Application download page" href="http://www.windowsphone.com/en-gb/store/app/lockscreenizer/67877667-da21-4ca5-be4e-6699ec6625cd">the app's in the store now</a>.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10394636" width="1" height="1">
]]>
		</document>
		<document id="183209dda410c5b8727641cf92e0ef8d" url="http://blogs.msdn.com/b/gsmyth/archive/2013/04/06/doppler-three.aspx"><![CDATA[<p>The&nbsp;<a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2012/11/10/doppler-one.aspx">Doppler&nbsp;waves program</a> has two bits of UI really: the "dynamic" wave drawing part, and the user interaction part, namely the slider. I could recreate a slider myself, or use some other interaction mechanism in my C++ DirectX variant of the program - the slider's not a hugely complex bit of UI. Or I could keep using standard Windows controls as far as possible, with a DirectX pane for the other...</p>
<p>The starting point for a Direct2D app is, not surprisingly, the "Direct 2D (XAML)" project template in Visual Studio. This creates a fairly simple project combining XAML and a DirectX surface, which displays a couple of "Hello" text lines, one created in XAML and one in DirectX&nbsp;code. The project creates the basic application framework I'm going to use almost as-is, and includes some useful base classes and helpers. Starting from the outside, the DirectXPage.xaml/.h/.cpp files define the window frame. Replace the XAML file body with the following to place the slider on the screen.</p>
<pre><span>&lt;</span><span>SwapChainBackgroundPanel</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"SwapChainPanel"</span><span>&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>&lt;</span><span>Slider</span><span>&nbsp;x</span><span>:</span><span>Name</span><span>=</span><span>"SliderSpeed"</span><span>&nbsp;VerticalAlignment</span><span>=</span><span>"Bottom"</span><span>&nbsp;Margin</span><span>=</span><span>"10"</span><span>&nbsp;Orientation</span><span>=</span><span>"Horizontal"<br /></span><span> &nbsp;ValueChanged</span><span>=</span><span>"SliderSpeed_ValueChanged"</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;Minimum</span><span>=</span><span>"0"</span><span>&nbsp;Maximum</span><span>=</span><span>"1"</span><span>&nbsp;LargeChange</span><span>=</span><span>"0.1"</span><span>&nbsp;SmallChange</span><span>=</span><span>"0.05"</span><span><br /></span><span> IsThumbToolTipEnabled</span><span>=</span><span>"False"</span><span>&nbsp;/&gt;</span>
<span>&lt;/</span><span>SwapChainBackgroundPanel</span><span>&gt;</span></pre>
<p>Well, that's defined the whole UI - everything else happens in code. In the codebehind file, remove all the text related material, and add the slider value change handler (call m_renderer-&gt;SetSpeed(SliderSpeed-&gt;Value), which I'll define later. Since this app continuously updates the screen, there's no need for the render-needed optimisation, so that can be thrown away, leaving two interesting calls to m_renderer: Update (intended to set positions, etc. ready for drawing) and Render (actually does the drawing). The rest of DirectXPage.xaml.cpp looks after screen orientation changes and size changes (such as that resulting from snapping), and state saving and restoring (I'll ignore that for the time being).</p>
<p>As with the C# version, the core engine looks after positioning a moving spot, and maintains a list of growing "waves" - however, we don't have convenient animation classes to take care of the wave growth, so I need to do that myself. Switching focus to the innermost part of the source, I have a very simple Wave definition class, with its own Update and Render methods:</p>
<pre><span>class</span>&nbsp;<span>WaveDefinition</span>
{
<span>public</span>:
	WaveDefinition(<span>float</span>&nbsp;<span>x</span>,&nbsp;<span>float</span>&nbsp;<span>y</span>,&nbsp;<span>float</span>&nbsp;<span>t</span>)&nbsp;:&nbsp;m_x(<span>x</span>),&nbsp;m_y(<span>y</span>),&nbsp;m_t(<span>t</span>),&nbsp;m_radius(0),&nbsp;m_thickness(0),&nbsp;m_alpha(0.7f)
	{}
 
	<span>bool</span>&nbsp;Update(<span>float</span>&nbsp;time);
	<span>void</span>&nbsp;Render(<span>struct</span>&nbsp;<span>ID2D1RenderTarget</span>*&nbsp;context);
 
<span>private</span>:
	<span>float</span>&nbsp;m_x,&nbsp;m_y,&nbsp;m_t;
	<span>float</span>&nbsp;m_radius,&nbsp;m_thickness,&nbsp;m_alpha;
};</pre>
<p>Update, er, updates those last three member variables, doing something vaguely similar to the animations in the first C# program, and returns a boolean value indicating when the wave has finally faded away:</p>
<pre><span>bool</span>&nbsp;<span>WaveDefinition</span>::Update(<span>float</span>&nbsp;<span>time</span>)
{
	<span>float</span>&nbsp;liveTime&nbsp;=&nbsp;<span>time</span>&nbsp;-&nbsp;m_t;
	m_radius&nbsp;=&nbsp;liveTime&nbsp;*&nbsp;0.25f;
	m_thickness&nbsp;=&nbsp;liveTime&nbsp;*&nbsp;0.005f&nbsp;+&nbsp;0.01f;
	<span>if</span>(liveTime&nbsp;&gt;&nbsp;1.0f)
		m_alpha&nbsp;=&nbsp;1.7f&nbsp;-&nbsp;liveTime;
	<span>return</span>&nbsp;m_alpha&nbsp;&gt;&nbsp;0.0f;
}
</pre>
<p>Render, not surprisingly, draws the wave - actually, it draws two (for the reason explained in <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2012/11/10/doppler-one.aspx">the first article</a>):</p>
<pre><span>void</span>&nbsp;<span>WaveDefinition</span>::Render(<span>ID2D1RenderTarget</span>*&nbsp;<span>context</span>)
{
	<span>D2D1_ELLIPSE</span>&nbsp;ellipse&nbsp;=&nbsp;D2D1::Ellipse(D2D1::Point2F(m_x,&nbsp;m_y),&nbsp;m_radius,&nbsp;m_radius);
 
	Microsoft::WRL::<span>ComPtr</span>&lt;<span>ID2D1SolidColorBrush</span>&gt;&nbsp;brush;
	DX::ThrowIfFailed(<span>context</span>-&gt;CreateSolidColorBrush(D2D1::<span>ColorF</span>(~0,&nbsp;m_alpha),&nbsp;&amp;brush));
 
	<span>context</span>-&gt;DrawEllipse(&amp;ellipse,&nbsp;brush.Get(),&nbsp;m_thickness);
	ellipse.point.x&nbsp;-=&nbsp;2.0f;
	<span>context</span>-&gt;DrawEllipse(&amp;ellipse,&nbsp;brush.Get(),&nbsp;m_thickness);
}</pre>
<p>Note that I've normalised the space on which the waves are drawn to be a rectangle 2 units by 1, hence the subtraction of 2 to position the phantom wave.</p>
<p>Having talked about the top and the bottom of the stack, it's time to take a look at the middle. WaveRenderer.h/.cpp started off as the project template's SimpleTextRenderer, then I threw away the text and color parts, and added the waves.</p>
<p>&nbsp;The DirectXBase class, from which my WaveRenderer is derived, splits initialisation into three phases - items which are device independent, items that are device specific, and items that are sensitive to screen size and orientation. The idea is that, for example, items that are independent of screen size don't need to be reinitialised when the screen orientation is changed. In my initial version of this app, without any custom shader effect (even though that's the reason I'm delving into DirectX - but small steps to begin with...) I have only one device specific item, the red brush used to draw the moving spot.</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::CreateDeviceResources()
{
	<span>DirectXBase</span>::CreateDeviceResources();
 
	DX::ThrowIfFailed(
		m_d2dContext-&gt;CreateSolidColorBrush(<span>ColorF</span>(<span>ColorF</span>::<span>Red</span>), &amp;m_ellipseBrush)
		);
}</pre>
<p>There's a little bit more going on in the size dependent setup - as I said earlier, I've normalised the drawing space to a 2x1 rectangle, and the work here is to calculate the scale factor and positioning. Note that there is no need to do any processing for the elements defined in XAML as that layout is taken care of us by the framework.</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::CreateWindowSizeDependentResources()
{
	<span>DirectXBase</span>::CreateWindowSizeDependentResources();
 
	<span>//&nbsp;Map&nbsp;0&nbsp;-&nbsp;2,&nbsp;-0.5&nbsp;-&nbsp;0.5&nbsp;to&nbsp;fit&nbsp;the&nbsp;screen</span>
	<span>float</span>&nbsp;sw&nbsp;=&nbsp;m_window-&gt;Bounds.Width,&nbsp;sh&nbsp;=&nbsp;m_window-&gt;Bounds.Height;
	<span>float</span>&nbsp;xScale&nbsp;=&nbsp;sw&nbsp;/&nbsp;2.0f;
	<span>float</span>&nbsp;yScale&nbsp;=&nbsp;sh&nbsp;/&nbsp;1.0f;
	m_scale&nbsp;=&nbsp;xScale&nbsp;&lt;&nbsp;yScale&nbsp;?&nbsp;xScale&nbsp;:&nbsp;yScale;
 
	<span>float</span>&nbsp;w&nbsp;=&nbsp;m_scale&nbsp;*&nbsp;2.0f;
	<span>float</span>&nbsp;h&nbsp;=&nbsp;m_scale&nbsp;*&nbsp;1.0f;
 
	<span>float</span>&nbsp;xo&nbsp;=&nbsp;(sw&nbsp;-&nbsp;w)&nbsp;*&nbsp;0.5f;
	<span>float</span>&nbsp;yo&nbsp;=&nbsp;(sh&nbsp;-&nbsp;h)&nbsp;*&nbsp;0.5f;
 
	<span>Matrix3x2F</span>&nbsp;scaleTransform&nbsp;=&nbsp;<span>Matrix3x2F</span>::Scale(m_scale,&nbsp;m_scale);
	<span>Matrix3x2F</span>&nbsp;translateTransform&nbsp;=&nbsp;<span>Matrix3x2F</span>::Translation(xo,&nbsp;yo&nbsp;+&nbsp;h&nbsp;*&nbsp;0.5f);
	m_outputTransform2D&nbsp;=&nbsp;scaleTransform&nbsp;*&nbsp;translateTransform&nbsp;*&nbsp;m_orientationTransform2D;
	<span>m_d2dContext-&gt;SetTransform(m_outputTransform2D);</span>
}</pre>
<p>WaveRenderer has a few extra member variables, some of which have been mentioned earlier - for completeness, here they all are:</p>
<pre>	Microsoft::WRL::<span>ComPtr</span>&lt;<span>ID2D1SolidColorBrush</span>&gt;&nbsp;m_ellipseBrush; // used to pain spot
	<span>float</span>&nbsp;m_x; // position of the spot (y is constant)<br />float&nbsp;m_scale; // scale factor between 2x1 canvas and screen
	D2D1::<span>Matrix3x2F</span>&nbsp;m_outputTransform2D; // full transformation between 2x1 and screen
	<span>float</span>&nbsp;m_speed; // speed value from slider
	<span>float</span>&nbsp;m_newWaveTime; // when to create a new wave
</pre>
<p>Moving on to the Update and Render pair, Update asks all the existing WaveDefinitions to update themselves - any which would become invisible are thrown away; the spot is moved by an amount dependent on m_speed, and if it's time to create another wave, a new WaveDefinition is created.</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::Update(<span>float</span>&nbsp;<span>timeTotal</span>,&nbsp;<span>float</span>&nbsp;<span>timeDelta</span>)
{
	std::<span>vector</span>&lt;<span>WaveDefinition</span>&gt;&nbsp;newWaves;
	<span>for </span>(<span>auto</span>&nbsp;i&nbsp;=&nbsp;m_waves.begin(),&nbsp;end&nbsp;=&nbsp;m_waves.end();&nbsp;i&nbsp;!=&nbsp;end;&nbsp;++i)
		<span>if </span>(i-&gt;Update(<span>timeTotal</span>))
			newWaves.push_back(*i);
	m_waves=newWaves;
 
	m_x&nbsp;+=&nbsp;<span>timeDelta</span>&nbsp;*&nbsp;m_speed;
	<span>if</span>(m_x &gt; 2)
		m_x -= 2;
 
	<span>if </span>(<span>timeTotal</span>&nbsp;&gt;&nbsp;m_newWaveTime)
	{
		m_waves.push_back(<span>WaveDefinition</span>(m_x,&nbsp;0.0f,&nbsp;<span>timeTotal</span>));
		<span>if </span>(m_newWaveTime==0.0f)
			m_newWaveTime&nbsp;=&nbsp;<span>timeTotal</span>;
		m_newWaveTime&nbsp;+=&nbsp;0.4f;
	}
}
</pre>
<p>Incidentally, the time values here come from the project template helper classes, and have seconds as the unit.</p>
<p>Having got all our ducks lined up, Render is pretty simple:</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::Render()
{
	m_d2dContext-&gt;BeginDraw();
  
	<span>m_d2dContext-&gt;Clear(ColorF(0));</span>
 
	<span>for (auto&nbsp;i&nbsp;=&nbsp;m_waves.begin(),&nbsp;end&nbsp;=&nbsp;m_waves.end();&nbsp;i&nbsp;!=&nbsp;end;&nbsp;++i)</span>
	<span> i-&gt;Render(m_d2dContext.Get());</span>
 
	<span>D2D1_ELLIPSE</span>&nbsp;ellipse&nbsp;=&nbsp;D2D1::Ellipse(D2D1::Point2F(m_x,&nbsp;0.0f),&nbsp;0.01f,&nbsp;0.01f);
 	m_d2dContext-&gt;FillEllipse(&amp;ellipse,&nbsp;m_ellipseBrush.Get());
 
	<span>//&nbsp;Ignore&nbsp;D2DERR_RECREATE_TARGET.&nbsp;This&nbsp;error&nbsp;indicates&nbsp;that&nbsp;the&nbsp;device</span>
	<span>//&nbsp;is&nbsp;lost.&nbsp;It&nbsp;will&nbsp;be&nbsp;handled&nbsp;during&nbsp;the&nbsp;next&nbsp;call&nbsp;to&nbsp;Present.</span>
	<span>HRESULT</span>&nbsp;hr&nbsp;=&nbsp;m_d2dContext-&gt;EndDraw();
	<span>if</span>&nbsp;(hr&nbsp;!=&nbsp;<span>D2DERR_RECREATE_TARGET</span>)
	{
		DX::ThrowIfFailed(hr);
	}
}</pre>
<p>That's it for today - I'll add the shader effect next time.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10383780" width="1" height="1">
]]>
		</document>
		<document id="848c5ee281e66bc37392ee81fe6699b7" url="http://blogs.msdn.com/b/gsmyth/archive/2013/05/08/doppler-four.aspx"><![CDATA[<p>Last time I had the basic Windows Store DirectX Doppler app working, and now it's time to add the shader. To begin, <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/hh973240.aspx">effects</a> are applied to images, which means I need to draw the waves on to some off-screen bitmap, and then render that via an effect. I'll add some new members to WaveRenderer for the necessary data objects:</p>
<pre>	Microsoft::WRL::<span>ComPtr</span>&lt;<span>ID2D1BitmapRenderTarget</span>&gt;&nbsp;m_renderTarget;
	Microsoft::WRL::<span>ComPtr</span>&lt;<span>ID2D1Bitmap</span>&gt;&nbsp;m_bitmap;
	Microsoft::WRL::<span>ComPtr</span>&lt;<span>ID2D1Effect</span>&gt;&nbsp;m_effect;
</pre>
<p>The first is the new off-screen context into which to draw; the second the bitmap that represents; and the third the effect object.</p>
<p>Changes to the program include initialising these objects, and updates to the Render method to draw. Last time I noted that initialisation is split into several phases - since the effect is resolution independent, its initialisation appears in CreateDeviceResources (to start, I'm using a built in Gaussian blur):</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::CreateDeviceResources()
{
	<span>DirectXBase</span>::CreateDeviceResources();
 
	m_d2dContext-&gt;CreateSolidColorBrush(<span>ColorF</span>(<span>ColorF</span>::<span>Red</span>), &amp;m_ellipseBrush);
 
	<strong>m_d2dContext-&gt;CreateEffect(CLSID_D2D1GaussianBlur,&nbsp;&amp;m_effect);</strong>
	<strong>m_effect-&gt;SetValue(D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION,&nbsp;3.0f);</strong>
	<strong>m_effect-&gt;SetValue(D2D1_GAUSSIANBLUR_PROP_BORDER_MODE,&nbsp;D2D1_BORDER_MODE_HARD);</strong>
}
</pre>
<p>New code in bold (and I've removed error checking for brevity).</p>
<p>The bitmap size matches the display output, so initialisation for that is in the resolution dependent method:</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::CreateWindowSizeDependentResources()
{
	<span>DirectXBase</span>::CreateWindowSizeDependentResources();
 
	<span>//&nbsp;... elided code from last time ...</span>
<br />	<strong>// Don't apply transform to screen context, but to the back buffer</strong>
	<strong>// m_d2dContext-&gt;SetTransform(m_outputTransform2D);</strong>

	<strong>m_d2dContext-&gt;CreateCompatibleRenderTarget(D2D1::SizeF(m_windowBounds.Width,&nbsp;m_windowBounds.Height),&nbsp;&amp;m_renderTarget);</strong>
	<strong>m_renderTarget-&gt;SetTransform(m_outputTransform2D);</strong>
	<strong>m_renderTarget-&gt;GetBitmap(&amp;m_bitmap);</strong>
	<strong>m_effect-&gt;SetInput(0,&nbsp;m_bitmap.Get());</strong>
}
</pre>
<p>Again, changes in bold. This creates the back buffer render target into which I'll draw later, then connects the effect input to that bitmap.</p>
<p>The drawing routine is where most of the changes are:</p>
<pre><span>void</span>&nbsp;<span>WavesRenderer</span>::Render()
{
	m_renderTarget-&gt;BeginDraw();
 
	m_renderTarget-&gt;Clear(<span>ColorF</span>(0));
 
	<span>for</span>(<span>auto</span>&nbsp;i&nbsp;=&nbsp;m_waves.begin(),&nbsp;end&nbsp;=&nbsp;m_waves.end();&nbsp;i&nbsp;!=&nbsp;end;&nbsp;++i)
		i-&gt;Render(m_renderTarget.Get());
 
	m_renderTarget-&gt;EndDraw();
 
	m_d2dContext-&gt;BeginDraw();
 
	m_d2dContext-&gt;DrawImage(m_effect.Get());
  
	<span>D2D1_ELLIPSE</span>&nbsp;ellipse&nbsp;=&nbsp;D2D1::Ellipse(m_outputTransform2D.TransformPoint(D2D1::Point2F(m_x,&nbsp;0.0f)),&nbsp;0.01f&nbsp;*&nbsp;m_scale,&nbsp;0.01f&nbsp;*&nbsp;m_scale);
	m_d2dContext-&gt;FillEllipse(&amp;ellipse,&nbsp;m_ellipseBrush.Get());
 
	m_d2dContext-&gt;EndDraw();
}
</pre>
<p>First, draw the waves into the back buffer, then draw the effect output into the main context. Because I want the red spot to be drawn with a sharp outline, I don't draw that in the back buffer but, instead, draw it separately into the main drawing context. However, there's a render transformation from my 2x1 canvas to screen space, and I've applied that to the back buffer. Perhaps I should use the screen size as the canvas instead of normalising, but the quick fix here is to apply the transformation manually to the ellipse before I draw it.</p>
<p>Putting that all together I get something close to the <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2012/11/10/doppler-one.aspx">original Doppler application</a>, but need to add my contrast enhancing blur effect instead of the Gaussian. Following the instructions <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/jj710194.aspx">here</a>&nbsp;and looking closely at <a title="Effects sample app" href="http://go.microsoft.com/fwlink/?LinkID=267567">the sample app</a>, I created a ContrastEffect class which is almost identical to the RippleEffect class in that sample (I removed the paramter setting) and wired it into the application above. I did have a few problems with the pixel shader code itself: Visual Studio wanted to compile it as Shader Model 4 and the code from the original article uses tex2D, which isn't a level 4 construct. Being lazy, my first thought was to tell VS to treat it as Shader Model 3 - that all built, but the compiled shader wouldn't load. OK, next tack was to switch it back to Shader Model 4, but supply the /Gec legacy compiler option - again, compiled but failed to load. Sigh, I had to actually work out what the replacement for tex2D is and update the HLSL to Shader Model 4 - the whole file is shown below, with changed areas in bold:</p>
<pre><strong>Texture2D&nbsp;InputTexture&nbsp;:&nbsp;register(t0)</strong>;
<strong>SamplerState&nbsp;InputSampler&nbsp;:&nbsp;register(s0)</strong>;
 
<span>float4</span>&nbsp;main(
	<strong>float4&nbsp;pos&nbsp;:&nbsp;SV_POSITION</strong>,
	<strong>float4&nbsp;posScene&nbsp;:&nbsp;SCENE_POSITION</strong>,
	<strong>float4&nbsp;uv&nbsp;:&nbsp;TEXCOORD</strong>0
	)&nbsp;:&nbsp;<strong>SV_Target</strong>
{
	<span>float2</span>&nbsp;sampleOffsets[9]&nbsp;=
	{
	&nbsp;&nbsp;&nbsp;0,0,&nbsp;-1,0,&nbsp;1,0,&nbsp;0,-1,&nbsp;0,1,&nbsp;-1,-1,&nbsp;-1,1,&nbsp;1,-1,&nbsp;1,1
	};
 
	<span>float</span>&nbsp;scales[9]&nbsp;=
	{
	&nbsp;&nbsp;1,&nbsp;0.8,&nbsp;0.8,&nbsp;0.8,&nbsp;0.8,&nbsp;0.7,&nbsp;0.7,&nbsp;0.7,&nbsp;0.7
	};
 
	<span>//&nbsp;Very&nbsp;crude&nbsp;and&nbsp;simplistic&nbsp;blur</span>
	<span>float4</span>&nbsp;c&nbsp;=&nbsp;0;
	<span>for</span>(<span>int</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;9;&nbsp;++i)
		c&nbsp;+=&nbsp;scales[i]&nbsp;*<strong>&nbsp;InputTexture.Sample(InputSampler,&nbsp;uv.xy&nbsp;+&nbsp;sampleOffsets[i]&nbsp;*&nbsp;uv.zw</strong>);
	c&nbsp;/=&nbsp;7;
	c&nbsp;=&nbsp;saturate(c);
 
	<span>//&nbsp;Increase&nbsp;the&nbsp;contrast&nbsp;greatly</span>
	<span>float4</span>&nbsp;c0&nbsp;=&nbsp;c&nbsp;*&nbsp;c&nbsp;*&nbsp;c;
	c0.a&nbsp;=&nbsp;c.a;
 
	<span>return</span>&nbsp;c0;
}</pre>
<p>After all that, I've pretty much achieved my goal: a modern Windows 8 equivalent to the Doppler demo, harder work than I'd expected. The app's not complete (icons, state persistence, general tidiness!!) but this'll do for now.</p>
<p>&nbsp;</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10383829" width="1" height="1">
]]>
		</document>
		<document id="bdea420d135ee42fdddba9c8e9ab3af8" url="http://blogs.msdn.com/b/gsmyth/archive/2013/06/09/talking-to-myself.aspx"><![CDATA[<p>Someone at work here presented me with a poser: make Outlook include one's own email address as a BCC when sending an email. I know you can check a box to get Outlook to <em>CC</em> yourself, and you can also get Outlook to save messages in the Sent Items folder, but he really wanted to be BCC'd, so I thought, why not have a look...</p>
<p>Now, there's an easy way and a hard way. The boring easy way is to hook <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff865076.aspx">Application.ItemSend</a> and append the user's address to the message recipients. After a little discussion we concluded that he preferred to have the address appear in the BCC line when the message was being composed, to give a little extra confidence (and a reminder) that the address would be included, and also to let him&nbsp;<em>remove</em>&nbsp;the address for those messages not worth copying to himself. <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/06/outlook-object-model.aspx">Quite a while ago now</a>, I outlined how to add a handler for <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff867841.aspx">Inspectors.NewInspector</a> in the <a title="NoReplyAll Add-in project page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">NoReplyAll add-in</a>: this is a convenient place to hook up an email address - but only if the user is composing a message (either a new message or a reply/forward) and not if the user is merely reading a received one.</p>
<p>Here's a reasonable NewInspector handler:</p>
<pre>private void OnNewInspector(Outlook.Inspector inspector)<br />{<br />    var item = inspector.CurrentItem as Outlook.MailItem;<br />    if (item != null)<br />    {<br />        if (string.IsNullOrEmpty(item.EntryID))<br />           AddSelfToBcc(item);<br />       Marshal.ReleaseComObject(item);<br />    }<br />}</pre>
<p>An investigation showed that an empty EntryID seems to be a good indication that the mail item is a newly composed one - according to the <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff866458.aspx">documentation</a>, only saved items have non-empty values, thus I think the only time I'll see empty within the NewInspector is when the message is indeed a newly created one. And see <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/06/outlook-object-model.aspx">an earlier blog post</a> about why I have the occasional ReleaseComObject call in my code.</p>
<p>Before exploring AddSelfToBcc, a question to be answered is which email address should be used? If you only have a single email account attached to Outlook, the answer is pretty straightforward, but if you have more than one, then what's the obvious choice? I could be lazy and make the user specify which address to use in some settings page, or I could always use the address in the default account, but I thought I'd show off a bit and pick an address appropriate to the message... What this really means is that for a new message, use the default account; for a reply, use whatever address the original message was sent to. The next issue is how to get hold of that address...</p>
<p><a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff869056.aspx">MailItem.Sender</a> sounded like it might be a nice option but, unfortunately, it's only set for received messages. However, <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff869311.aspx">MailItem.SendUsingAccount</a> <em>is</em> valid and gets us one step closer:</p>
<pre>private void AddSelfToBcc(Outlook.MailItem item)<br />{<br />    var account = item.SendUsingAccount;<br />    var user = account.CurrentUser;<br />    var self = user.Address;<br />    Marshal.ReleaseComObject(user);<br />    Marshal.ReleaseComObject(account);<br /><br />    var recipients = item.GetProperty.Recipients;<br />    bool found = false;<br />    foreach (Outlook.Recipient recipient in recipients)<br />        if (recipient.Address == self)<br />        {<br />            found = true;<br />            break;<br />        }<br />    if (!found)<br />    {<br />        var newRecipient = recipients.Add(self);<br />        newRecipient.Type = (int)Outlook.OlMailRecipientType.olBCC;<br />        newRecipient.Resolve();<br />        Marshal.ReleaseComObject(newRecipient);<br />    }<br />    Marshal.ReleaseComObject(recipients);<br />}</pre>
<p>Rather than unconditionally adding the address, I do a quick check to see if it's already there (as might be the case, say, when responding to a the latest in a sequence of emails to and fro); and note the call to <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/ff862796.aspx">Recipient.Resolve</a> - it makes the displayed string look just a little nicer by getting Outlook to, well, resolve it.</p>
<p>As well as NewInspector, Outlook 2013's inline response mechanism adds a new mechanism for displaying new messages. We can handle <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/office/jj229061">Explorer.InlineResponse</a> in just the same way as NewInspector to add an email address (though there's no need to check if the message is a newly composed one or a received one, since it'll always be a new message).</p>
<p>Finally, I'm debating whether or not to include this in the next release of NoReplyAll - it's got nothing to do with disabling replies, but it is kinda cool...</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10412873" width="1" height="1">
]]>
		</document>
		<document id="2a4bc7217f35c6953d88b8726a95c778" url="http://blogs.msdn.com/b/gsmyth/archive/2013/07/12/add-in-for-64-and-32-bit-office.aspx"><![CDATA[<p>My <a title="Project home page" href="http://research.microsoft.com/en-us/projects/researchdesktop/noreplyall.aspx">NoReplyAll add-in</a>, which I've talked about before, uses absolutely nothing that ties it to 32 or 64 bit Outlook - it's all "anycpu" with no architecture specific dependencies. However, the latest installer <em>is</em>&nbsp;32 bit, with the result that the add-in won't appear in 64 bit Outlook.</p>
<p>This wasn't a problem with a ClickOnce installer but, for reasons explained <a title="Previous post" href="http://blogs.msdn.com/b/gsmyth/archive/2013/01/27/wix-installer-for-vsto-projects.aspx">elsewhere</a>, I wanted to make a MSI based install package, and MSI technology is bit-width specific. One approach is to create both 32 and 64 bit packages, and have a bootstrapper to choose which to run but I want to avoid that because the content of the two packages would be identical, apart from the flags saying whether they were 64 bit or not. It's also totally the wrong thing for another reason: the MSI bitness declares what flavour of the operating system the package is intended for, and says nothing about the bitness of Office. People run 32 bit Office on 64 bit Windows (I do, for example), so I'd really want a 32 bit installer for this setup, not the 64 bit one.</p>
<p>Let's take a brief step back: what does it mean for the installer to be 64 or 32 bit? Pretty much all that happens is when a 64 bit installer runs on a 64 bit OS, or when a 32 bit one runs on a 32 bit OS, the program files directory maps to (typically) "C:Program Files" and the registry keys such as HKLMSoftwareMicrosoft map, not too surprisingly, on to HKLMSoftwareMicrosoft. However, if you run a 32 bit MSI on a 64 bit OS, program files is mapped to "C:Program Files <strong>(x86)</strong>" and that registry key will be sent to HKLMSoftware<strong>Wow6432Node</strong>Microsoft - this all happens automatically via "<a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384235.aspx">registry reflection</a>." I'm sure there are a few other differences too, but they're not important here. What's more, there's no way (within Windows Installer technology), as far as I'm aware, for a 32 bit MSI package to reach out to the non-redirected parts of the filing system or registry without writing extra code. (For completeness, there's no similar mapping when running a 64 bit installer on a 32 bit OS - primarily because you just can't install 64 bit MSIs on 32 bit Windows!)</p>
<p>Now, the directory in which I place the add-in bits is irrelevant, but the registry is significant... By releasing a 32 bit installer, I was placing the registry stuff under HKLMSoftwareWow6432NodeMicrosoftOfficeOutlook on a 64 bit version of Windows - and this so happens to be where 32 bit Outlook looks for its add-ins. People running 64 bit Office would see no add-in because it's looking under HKLMSoftwareMicrosoftOfficeOutlook. (And the reason that there's no problem with ClickOnce is that it adds the registry settings under HKCU, which doesn't have this redirection and is visible to both 32 and 64 bit Outlook.)</p>
<p>I did consider looking to see what bitness of Office is installed and trying to modify the appropriate part of the registry, but decided against that because I wouldn't want the add-in to "vanish" were someone to uninstall their 32 bit Outlook and then install 64 bit (or vice versa). Instead, I decided that I would always install in the 32 bit friendly location but, on 64 bit Windows, also copy the registry settings "up" as part of the install process. Now, 32 bit applications can't (easily) see the 64 bit parts of the registry because of the automatic redirection, but 64 bit executables get to see everything, so I considered writing a small executable which would run post-install to copy the contents of the appropriate registry key, and also delete it on uninstall. However, then I stumbled across the <a title="TechNet documentation" href="http://technet.microsoft.com/en-us/library/bb490984.aspx">REG</a> command - which does allow access to the whole registry without me having to write anything more than a command line! In particular, it can copy the contents of one registry key to another, so I can let Windows Installer deal with the 32 bit part of the registry (in a 32 bit installer) as normal, and then use REG to copy what was placed there into the equivalent 64 bit location.</p>
<p>I made the following additions to the WiX Product.wxs file:</p>
<pre>    &lt;Property Id="CopyReg64Key" Value='"REG.EXE" COPY "HKLMSoftwareWoW6432NodeMicrosoftOfficeOutlookAddinsNoReplyAll" "HKLMSoftwareMicrosoftOfficeOutlookAddinsNoReplyAll" /s /f /reg:64' /&gt;<br />    &lt;CustomAction Id="CopyReg64Key" Execute="deferred" Return="ignore" Impersonate="no" BinaryKey="WixCA" DllEntry="CAQuietExec" /&gt;<br /><br />    &lt;Property Id="DeleteReg64Key" Value='"REG.EXE" DELETE "HKLMSoftwareMicrosoftOfficeOutlookAddinsNoReplyAll" /f /reg:64' /&gt;<br />    &lt;CustomAction Id="DeleteReg64Key" Execute="deferred" Return="ignore" Impersonate="no" BinaryKey="WixCA" DllEntry="CAQuietExec" /&gt;</pre>
<pre>    &lt;InstallExecuteSequence&gt;<br />      &lt;Custom Action="CopyReg64Key" Before="InstallFinalize"&gt;<br />        &lt;![CDATA[$CMP_VstoManifest=3]]&gt;<br />      &lt;/Custom&gt;<br />      &lt;Custom Action="DeleteReg64Key" Before="RemoveFiles"&gt;<br />        &lt;![CDATA[$CMP_VstoManifest=2]]&gt;<br />      &lt;/Custom&gt;<br />    &lt;/InstallExecuteSequence&gt;</pre>
<p>The first pair of lines defines a custom action which copies the 32 bit registry entries to the "same place" in the 64 bit part. This will fail silently on a 32 bit operating system, which is fine. Unfortunately it will also fail on Windows XP, since the reg.exe that that comes with doesn't recognise the /reg:64 command line option, but I don't expect that to affect very many people. This is using the WiX <a title="WiX documentation" href="http://wix.sourceforge.net/manual-wix3/qtexec.htm">quiet execution</a> extension, which lets me invoke a command line <em>without</em>&nbsp;showing a console window - the simpler custom action shown below would cause a brief console flash when it executes:</p>
<pre>&lt;CustomAction Id="CopyReg64Key" Execute="deferred" Return="ignore" Impersonate="no" Directory="INSTALLFOLDER"<br />              ExeCommand='REG COPY "HKLMSoftwareWoW6432NodeMicrosoftOfficeOutlookAddinsNoReplyAll" "HKLMSoftwareMicrosoftOfficeOutlookAddinsNoReplyAll" /s /f /reg:64' /&gt;</pre>
<p>The next pair of lines deletes the extra registry setting. On a 32 bit OS, this would delete the same values as the "normal" registry manipulation, so that's OK too. And the final bunch of lines cause the first custom action to be executed near the end of the install sequence and uninstall sequence as appropriate.</p>
<p>With all this in place, the bulk of the installer runs as before, updating the 32 bit parts of the registry. After all that, the custom actions fiddle with the 64 bit part of the registry, and we're done.</p>
<p>Look out for this in the next version of the add-in to be published...</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10417087" width="1" height="1">
]]>
		</document>
		<document id="73cb7395a4661ef2ac4833d1246783cc" url="http://blogs.msdn.com/b/gsmyth/archive/2013/08/03/noreplyall-add-in-3-1.aspx"><![CDATA[<p>A <a title="Download page" href="http://research.microsoft.com/en-us/downloads/60860f41-88ab-4bb4-8104-765feca9cfed/default.aspx">new release</a> is available today: fixed some <a title="Forum post" href="http://social.microsoft.com/Forums/en-US/6c931e06-e348-41ae-bbbd-f9e5bea910bd/noreplyall-2410-save-attachment-on-network-locking-file">resource locking problems</a>, added support for <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2013/07/12/add-in-for-64-and-32-bit-office.aspx">64 bit Outlook in the installer</a>, and added <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2013/06/09/talking-to-myself.aspx">self-BCC</a>.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10439163" width="1" height="1">
]]>
		</document>
		<document id="3eb68344dca30fc49f4d35e52d52a3a0" url="http://blogs.msdn.com/b/gsmyth/archive/2013/08/17/collecting-urls.aspx"><![CDATA[<p>Another one of those itches that need to be scratched: someone posted a query internally asking for tools that would copy URLs for all open browser windows to the clipboard. I don't know if such a tool exists but I thought it would be a fun exercise to write one regardless, especially since I had chunks of the necessary code hiding in <a title="Project home page" href="http://research.microsoft.com/en-us/um/cambridge/projects/ResearchDesktop/ProjectColletta/default.htm">Project Colletta</a>&nbsp;and its test harness already.</p>
<p>The first part of the puzzle is to find all the browser windows (tabs, actually) - I'm going to restrict myself to Internet Explorer because there's a convenient mechanism for locating them all (and, beside, given who I work for, it's obvious where I'm going to start), <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/cc836570.aspx">IShellWindows</a>, if I get hold of an appropriate object exposing that interface, I can iterate over the collection, identifying which windows are actually browser windows (the collection includes Windows Explorer as well as Internet Explorer), and grab their URLs:</p>
<pre>        private static IEnumerable&lt;Tuple&lt;string, string&gt;&gt; GetAllInternetExplorerTabs()<br />        {<br />            var tabs = new List&lt;Tuple&lt;string, string&gt;&gt;();<br /><br />            var CLSID_ShellWindows = new Guid("9BA05972-F6A8-11CF-A442-00A0C90A8F39");<br />            var shellWindowsType = Type.GetTypeFromCLSID(CLSID_ShellWindows);<br />            dynamic shellWindows = Activator.CreateInstance(shellWindowsType);<br /><br />            int count = shellWindows.Count;<br />            for (int i = 0; i &lt; count; i++)<br />            {<br />                try<br />                {<br />                    var browser = shellWindows.Item[i];<br />                    if (browser != null)<br />                    {<br />                        if (GetClassName((IntPtr)browser.HWND) == "IEFrame")<br />                        {<br />                            string url = browser.LocationURL;<br />                            string title = browser.LocationName;<br />                            Marshal.ReleaseComObject(browser);<br />                            tabs.Add(new Tuple&lt;string, string&gt;(url, title));<br />                        }<br />                    }<br />                }<br />                catch<br />                {<br />                }<br />            }<br />            Marshal.ReleaseComObject(shellWindows);<br />            return tabs;<br />        }</pre>
<p>Ignoring the fact that I'm being embarrassingly cavalier with regard to exception handling here, this operates by grabbing a ShellWindows object and extracting the URL and title from found browser windows. I've managed to keep the code very short by (lazily) relying on "dynamic" to look up properties and methods instead of COM casting things to the correct types. There will be a performance cost, but it's not important for this trivial application. If any of the dynamic accesses fail, an exception is thrown, hence my try...catch. I identify IE windows by looking at their window class names, using the helper function below. Finally, this routine returns a list of URL and title pairs for further processing.</p>
<pre>        private static string GetClassName(IntPtr hwnd)<br />        {<br />            var sb = new StringBuilder(256);<br />            GetClassName(hwnd, sb, sb.Capacity);<br />            return sb.ToString();<br />        }<br /><br />        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Unicode)]<br />        private static extern int GetClassName(IntPtr hwnd, StringBuilder lpString, int nMaxCount);</pre>
<p>.NET offers a very easy way to place matter on the clipboard, <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/system.windows.forms.clipboard.settext.aspx">Clipboard.SetText</a>, and I use it as follows:</p>
<pre>        private static void CopyInternetExplorerTabsToClipboard()<br />        {<br />            var sb = new StringBuilder();<br />            foreach (var t in GetAllInternetExplorerTabs())<br />            {<br />                if (Properties.Settings.Default.IncludeTitles)<br />                    sb.AppendLine(t.Item2);<br />                sb.AppendLine(t.Item1);<br />            }<br /><br />            if (sb.Length &gt; 0)<br />                Clipboard.SetText(sb.ToString());<br />        }</pre>
<p>I found I needed that length check because Clipboard.SetText got unhappy when given no text.</p>
<p>The next step is to wrap this in an application - I created a Windows Forms app, and threw away the form, creating a Notification Area icon instead:</p>
<pre>        private static NotifyIcon CreateNotificationIcon()<br />        {<br />            var menu = new ContextMenu(<br />                new MenuItem[]{<br />                    new MenuItem("Clip URLs", (sender, e) =&gt; { CopyInternetExplorerTabsToClipboard(); }),<br />                    new MenuItem("Include titles", (sender, e) =&gt;<br />                                                {<br />                                                    var mi = (MenuItem)sender;<br />                                                    Properties.Settings.Default.IncludeTitles = !mi.Checked;<br />                                                    Properties.Settings.Default.Save();<br />                                                    mi.Checked = Properties.Settings.Default.IncludeTitles;<br />                                                }){ Checked = Properties.Settings.Default.IncludeTitles },<br />                    new MenuItem("-"),<br />                    new MenuItem("Exit", (sender, ee) =&gt; { Application.Exit(); })<br />                });<br />            var notify = new NotifyIcon<br />            {<br />                Icon = Icon.ExtractAssociatedIcon(Assembly.GetExecutingAssembly().Location),<br />                ContextMenu = menu,<br />                Text = "Browser URL clipper",<br />                Visible = true<br />            };<br />            notify.Click += (sender, e) =&gt; { CopyInternetExplorerTabsToClipboard(); };<br /><br />            return notify;<br />        }</pre>
<p>Note that I added a boolean property, IncludeTitles, to the project settings to preserve the user's choice of whether to, er, include titles in the clipped text or not. A left click on the icon will clip all URLs, a right click pops up a menu which offers control of that property, and an application exit option.</p>
<p>Now, it is a bit of a chore to have to move the mouse pointer all the way to the Notification Area, so I added a basic <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms646279.aspx">hotkey handler</a> too. This would have been easier if my application had a main window, but it's only slightly more effort without - I need to install a <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/system.windows.forms.imessagefilter.aspx">message filter</a>, which gets a chance to peek at all messages sent to the main thread, and traps my hotkey message:</p>
<pre>        private const int HotkeyId = 1196; // Totally arbitrary<br /><br />        private class MessageFilter : IMessageFilter<br />        {<br />            public bool PreFilterMessage(ref Message m)<br />            {<br />                if (m.Msg == 0x0312 /* WM_HOTKEY */ &amp;&amp; m.WParam.ToInt32() == HotkeyId)<br />                {<br />                    CopyInternetExplorerTabsToClipboard();<br />                    return true;<br />                }<br />                return false;<br />            }<br />        }</pre>
<p>With all that in place, all that remains is to register the hotkey, create the notification icon, install the message filter, and run the message pump. When the user exits the application, undo all of that too:</p>
<pre>        [STAThread]<br />        static void Main()<br />        {<br />            RegisterHotKey(IntPtr.Zero, HotkeyId, 6 /* Ctrl + Shift */, 'C');<br />            var notify = CreateNotificationIcon();<br />            var filter = new MessageFilter();<br />            Application.AddMessageFilter(filter);<br /><br />            Application.Run();<br /><br />            Application.RemoveMessageFilter(filter);<br />            notify.Dispose();<br />            UnregisterHotKey(IntPtr.Zero, HotkeyId);<br />        }<br /><br />        [DllImport("user32.dll")]<br />        [return: MarshalAs(UnmanagedType.Bool)]<br />        private static extern bool RegisterHotKey(IntPtr hwnd, int id, int modifiers, uint vk);<br /><br />        [DllImport("user32.dll")]<br />        [return: MarshalAs(UnmanagedType.Bool)]<br />        private static extern bool UnregisterHotKey(IntPtr hwnd, int id);</pre>
<p>I've arbitrarily chosen Ctrl+Shift+C to snapshot URLs - if I wanted to be less lazy, I'd include a configuration option for this, but I'll leave it as an exercise for the reader.</p>
<p>That's it: about 100 lines of code to grab URLs from all current Internet Explorer tabs and drop them in the clipboard. Sometimes .NET programming is very satisfying!</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10442323" width="1" height="1">
]]>
		</document>
		<document id="d1911e23d1ebc3df26249f9a8e32fae9" url="http://blogs.msdn.com/b/gsmyth/archive/2013/09/14/collecting-urls-part-2.aspx"><![CDATA[<p>Using Ctrl-Shift-C is quick and convenient, but only if you remember it; and moving the mouse pointer all the way down to the Notification Area really is far too much like hard work. How about adding a control to the browser itself? Well, it's pretty easy to add something to Internet Explorer's <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/aa753591.aspx">menu</a> or <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/aa753588.aspx">toolbar</a>, but neither of those is visible in IE9 and above by default. A marginally more complex alternative is to add something to IE's context menu, which is what I'll describe here.</p>
<p>First of all, I need to adapt the program from last time so that it operates in two modes: as a resident application, as before, and a single shot "capture URLs and exit" mode. (There are other ways to support invoking from an external source such as the browser, but this is definitely the simplest.) I've replaced <a title="Previous post" href="http://blogs.msdn.com/b/gsmyth/archive/2013/08/17/collecting-urls.aspx">last time's</a> Main with:</p>
<pre>[STAThread]<br />static void Main()<br />{<br />    var args = Environment.GetCommandLineArgs();<br />    if (args.Length &gt; 1)<br />        switch (args[1][0]) // Just look at first letter and ignore the rest<br />        {<br />            case 'c':<br />            case 'C':<br />                CopyInternetExplorerTabsToClipboard();<br />                break;<br />        }<br />    else<br />    {<br />        bool mutexCreated;<br />        using (var mutex = new Mutex(false, "BrowserClip.Started", out mutexCreated))<br />        {<br />            if (mutexCreated)<br />            {<br />                &lt;Body of the previous version&gt;<br />            }<br />            else<br />                MessageBox.Show("The URL clipper is already running");<br />        }<br />    }<br />}</pre>
<p>The first modification is to check for command line arguments: if something starting with an upper or lowercase 'c' is given, perform the URL clip immediately, otherwise run as before. The second is a small bit of tidiness, to ensure that at most only a single resident instance of the application is running at any given time: the way this works is for the program to attempt to create a kernel object, a Mutex in this case; if this succeeds, then this is the first instance of the program, whereas if the Mutex already exists, another copy is already running.</p>
<p>Adding something to <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/aa753589.aspx">IE's context menu</a> is a two stage operation: a bit of registry manipulation to install the menu item and, because that can point only to an HTML file, such a file to invoke the clipping application. According to the MSDN page, you add the following to the registry to define a context menu item:</p>
<pre>[HKEY_CURRENT_USERSoftwareMicrosoftInternet ExplorerMenuExtClip all URLs]<br />"Contexts"=dword:00000001<br />@="<em>&lt;SOMEPATH&gt;</em>RunBrowserClip.htm"</pre>
<p>I.e., add a key under HKCRSoftwareMicrosoftInternet ExplorerMenuExt with the name of the menu item, giving its default value the absolute path to the HTML file to "run." The context defines when the menu item appears, 1 being the default - see the MSDN page for more details.</p>
<p>The HTML file contains nothing more than some JavaScript to run the application (with 'c' as the argument):</p>
<pre>&lt;html&gt;<br />&lt;script type="text/javascript"&gt;<br />var shell = new ActiveXObject("WScript.Shell");<br />shell.Run('"<em>&lt;EXEPATH&gt;</em>/BrowserClip.exe" c');<br />&lt;/script&gt;<br />&lt;/html&gt;</pre>
<p>Again, this has to specify a complete path, to the executable this time, but note that backslashes have to be escaped here (i.e., doubled) or could be switched to forward slashes.</p>
<p>With this in place, you should now see "Clip all URLs" on IE's right click menu, and selecting that will place all URLs on the clipboard, just the same as using the Notification Area icon or hotkey. (The first time you use it from the context menu, you'll get a warning that the web page wants to execute something, but you can suppress that warning thereafter.)</p>
<p>It is slightly annoying that full paths are needed in both the registry and the HTML file: a nice setup program could insert the correct paths at install time but that seems like a lot of work. Instead, I chose to add registration operations to the program. The argument switch statement is augmented with 'r' to register and 'u' to unregister:</p>
<pre>    case 'r':<br />    case 'R':<br />        RegisterContextMenu();<br />        break;<br />    case 'u':<br />    case 'U':<br />        UnregisterContextMenu();<br />        break;</pre>
<p>And the functions look like this:</p>
<pre>private const string regPath = @"SoftwareMicrosoftInternet ExplorerMenuExtClip all URLs";<br /><br />private static void RegisterContextMenu()<br />{<br />    var exePath = Assembly.GetExecutingAssembly().Location;<br />    var directory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);<br />    var htmlPath = GetHtmlPath();<br />    using (var w = new StreamWriter(htmlPath))<br />    {<br />        w.WriteLine("&lt;html&gt;&lt;script type='text/javascript'&gt;");<br />        w.WriteLine("var shell = new ActiveXObject('WScript.Shell');");<br />        w.WriteLine("shell.Run('"{0}" c');", new Uri(exePath).AbsoluteUri);<br />        w.WriteLine("&lt;/script&gt;&lt;/html&gt;");<br />    }<br />    using (var key = Registry.CurrentUser.CreateSubKey(regPath))<br />    {<br />        key.SetValue(null, htmlPath, RegistryValueKind.String);<br />        key.SetValue("Contexts", 1, RegistryValueKind.DWord);<br />    }<br />}<br /><br />private static void UnregisterContextMenu()<br />{<br />    Registry.CurrentUser.DeleteSubKeyTree(regPath);<br />    var htmlPath = GetHtmlPath();<br />    File.Delete(htmlPath);<br />}<br /><br />private static string GetHtmlPath()<br />{<br />    var directory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);<br />    return Path.Combine(directory, "RunBrowserClip.htm");<br />}</pre>
<p>I write the HTML file into the current user's LocalAppData space (somewhere I can write without requiring admin permissions), and the contents of both the registry value and that HTML file are built on the fly to point to the appropriate places. Unregistering simply removes both parts again.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10443345" width="1" height="1">
]]>
		</document>
		<document id="d3c28d5e17639a09ba35591c51fab858" url="http://blogs.msdn.com/b/gsmyth/archive/2013/10/13/noreplyall-lite.aspx"><![CDATA[<p>So far, all of the Office add-in work I've been talking about <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/09/18/noreply-vsto-add-in-wrap-up.aspx">here</a> has been based on VSTO, but some users of NoReplyAll have complained about having to install the .NET Framework (or, in some cases, install whatever version I'd chosen to use, because they've standardised on an earlier one, and don't want to, or can't, upgrade to newer). Additionally, there have been a couple of occasions where the difference between .NET's (garbage collected) way of managing resources and COM's deterministic mechanism has caused problems - for example, Outlook windows that won't go away, or an <a title="Forum post" href="http://social.microsoft.com/Forums/en-US/6c931e06-e348-41ae-bbbd-f9e5bea910bd/noreplyall-2410-save-attachment-on-network-locking-file">inability to delete .msg files</a>&nbsp;- my solution has been to add <a title="Previous blog post" href="http://blogs.msdn.com/b/gsmyth/archive/2011/08/06/outlook-object-model.aspx">a bunch of ugly Marshal.ReleaseComObject calls</a>, or even to force a garbage collection, which really takes me away from the convenience and elegance of VSTO. Because of these, it's been at the back of my mind to try writing a native C++ add-in, just to see how difficult it actually is - and I've finally got round to it.</p>
<p>Now, there are examples of native add-ins for Outlook out there - here are a <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/ee941475.aspx">couple</a> of <a title="Blog post" href="http://blogs.msdn.com/b/jensenh/archive/2006/12/08/using-ribbonx-with-c-and-atl.aspx">articles</a> worth reading &nbsp;- the examples I've come across have, like these, used <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/t9adwcde.aspx">ATL</a>. I find that ATL is very useful for creating COM objects of any complexity but feel that it's overkill for simple COM objects that have no Windows UI of their own: I don't like dragging in extra code to initialise things I don't need and it is a pain trying to debug through layers of wrappers (wrappers that were very convenient when writing the code, it must be said). Years ago, I user to work with DirectShow, and the COM framework that appeared in <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd389096.aspx">associated samples</a> used was much simpler than ATL - through reading those and some of the <a title="MSDN code sample" href="http://code.msdn.microsoft.com/CppShellExtThumbnailHandler-32399b35">shell integration samples</a>, I've ended up writing a lot of COM material without using any support framework.</p>
<p>Given all that, there are two parts to the add-in: "boilerplate" COM registration, and talking to Outlook. A very good summary of the first can be found in <a title="Blog post" href="http://blogs.msdn.com/b/oldnewthing/archive/2010/03/12/9977246.aspx">Raymond Chen's blog</a> and I won't repeat it here but will focus on the second. My Outlook add-in needs to implement three COM interfaces: IDTExtensibility2 (for an Office application to be able to load it), IRibbonExtensibility (as the name suggests, to be able to interact with the ribbon), and IDispatch (to handle ribbon callbacks); and the first of those is pretty straightforward:</p>
<pre>	STDMETHOD(OnConnection)(LPDISPATCH /*application*/, AddinDesign::ext_ConnectMode /*connectMode*/, LPDISPATCH /*addInInst*/, SAFEARRAY** /*custom*/)<br />	{<br />		return S_OK;<br />	}<br />	STDMETHOD(OnDisconnection)(AddinDesign::ext_DisconnectMode /*removeMode*/, SAFEARRAY** /*custom*/)<br />	{<br />		return S_OK;<br />	}<br />	STDMETHOD(OnAddInsUpdate)(SAFEARRAY** /*custom*/)<br />	{<br />		return S_OK;<br />	}<br />	STDMETHOD(OnStartupComplete)(SAFEARRAY** /*custom*/)<br />	{<br />		return S_OK;<br />	}<br />	STDMETHOD(OnBeginShutdown)(SAFEARRAY** /*custom*/)<br />	{<br />		return S_OK;<br />	}</pre>
<p>In my case, no need to do anything in response to the extensibility callbacks apart from to say, yup, OK, continue on your way. IRibbonExtensibility has only one methid, GetCustomUI, which is pretty much the same as the managed one I've shown before - the details are slightly different, this being C++, so it's not as convenient as simply returning a string:</p>
<pre>STDMETHODIMP CNoReplyAllLite::GetCustomUI(BSTR ribbonID, BSTR* ribbonXml)</pre>
<pre>{<br />	wchar_t* xml;<br />	if (     lstrcmpW(ribbonID, L"Microsoft.Outlook.Mail.Compose") == 0 ||<br />		     lstrcmpW(ribbonID, L"Microsoft.Outlook.MeetingRequest.Send") == 0 ||<br />		     lstrcmpW(ribbonID, L"Microsoft.Outlook.Post.Compose") == 0)<br />		xml = composeRobbomXml<br />L"&lt;?xml version='1.0' encoding='UTF-8'?&gt;"<br />L"&lt;customUI xmlns='http://schemas.microsoft.com/office/2006/01/customui' loadImage='Ribbon_LoadImage'&gt;"<br />L" &lt;ribbon&gt;"<br />L"  &lt;tabs&gt;"<br />L"   &lt;tab idMso='TabNewMailMessage'&gt;"<br />L"    &lt;group id='grpCReply' label='Disable'&gt;"<br />L"     &lt;toggleButton id='btnCNoReplyAll' tag='2'"<br />L"                   size='large' image='2'"<br />L"                   getPressed='ItemButton_IsPressed' onAction='ItemButton_Click'"<br />L"                   screentip='No Reply All' supertip='Prevent recipients within the same organisation from replying to all'"<br />L"                   label='Reply All' /&gt;"<br />L"     &lt;toggleButton id='btnCNoReply' tag='1'"<br />L"                   size='normal' image='1'"<br />L"                   getPressed='ItemButton_IsPressed' onAction='ItemButton_Click'"<br />L"                   screentip='No Reply' supertip='Prevent recipients within the same organisation from replying'"<br />L"                   label='Reply' /&gt;"<br />L"     &lt;toggleButton id='btnCNoForward' tag='3'"<br />L"                   size='normal' image='3'"<br />L"                   getPressed='ItemButton_IsPressed' onAction='ItemButton_Click'"<br />L"                   screentip='No Forward' supertip='Prevent recipients within the same organisation from forwarding the message'"<br />L"                   label='Forward' /&gt;"<br />L"    &lt;/group&gt;"<br />L"   &lt;/tab&gt;"<br />L"  &lt;/tabs&gt;"<br />L" &lt;/ribbon&gt;"<br />L"&lt;/customUI&gt;";<br />	else<br />		xml = nullptr;<br /><br />	*ribbonXml = xml ? SysAllocString(xml) : nullptr;<br />	return S_OK;<br />}</pre>
<p>My IDispatch implementation takes care of matching the callbacks in that, such as ItemButton_IsPressed, to a C++ method:</p>
<pre>STDMETHODIMP CNoReplyAllLite::GetIDsOfNames( REFIID, OLECHAR** names, UINT num, LCID lcid, DISPID* dispids )</pre>
<pre>{<br />	HRESULT hr = S_OK;<br />	for( UINT i = 0; i &lt; num; ++i )<br />		if( CompareStringW( lcid, 0, names[ i ], -1, L"ItemButton_Click", -1 ) == CSTR_EQUAL )<br />			dispids[i] = DISPID_ITEMBUTTON_ONACTION;<br />		else if( CompareStringW( lcid, 0, names[ i ], -1, L"ItemButton_IsPressed", -1 ) == CSTR_EQUAL )<br />			dispids[i] = DISPID_ITEMBUTTON_GETPRESSED;<br />		else if( CompareStringW( lcid, 0, names[ i ], -1, L"Ribbon_LoadImage", -1 ) == CSTR_EQUAL )<br />			dispids[i] = DISPID_RIBBON_LOADIMAGE;<br />		else<br />		{<br />			dispids[i] = DISPID_UNKNOWN;<br />			hr = DISP_E_UNKNOWNNAME;<br />		}<br />	return hr;<br />}<br /><br />STDMETHODIMP CNoReplyAllLite::Invoke( DISPID dispid, REFIID, LCID, WORD /*flags*/, DISPPARAMS* params, VARIANT* result, EXCEPINFO*, UINT* )<br />{<br />	switch( dispid )<br />	{<br />		case DISPID_ITEMBUTTON_ONACTION:<br />			{<br />				// Remember: rgvarg array in *reverse* order<br />				Office::IRibbonControlPtr control = params-&gt;rgvarg[1].pdispVal;<br />				ItemButton_Click(control, params-&gt;rgvarg[0].boolVal);<br />			}<br />			break;<br /><br />		case DISPID_ITEMBUTTON_GETPRESSED:<br />			{<br />				Office::IRibbonControlPtr control = params-&gt;rgvarg[0].pdispVal;<br />				variant_t b = ItemButton_IsPressed(control);<br />				*result = b.Detach();<br />			}<br />			break;<br /><br />		case DISPID_RIBBON_LOADIMAGE:<br />			{<br />				IDispatchPtr pic = Ribbon_LoadImage(params-&gt;rgvarg[0].bstrVal);<br />				variant_t disp = pic.Detach();<br />				*result = disp.Detach();<br />			}<br />			break;<br />	}<br /><br />	return S_OK;<br />}</pre>
<p>Notice that rather than "raw" VARIANTs and COM pointers, I favour variant_t and the _com_ptr_t types: these wrap and hide the details of cleanup and, in the case of the latter, QueryInterface too. (Without these, I'd almost certainly make more use of ATL, because it provides similar wrappers.)</p>
<p>Taking a small step back: in order to be able to access the extensibility and Office interfaces, I need to import their type libraries, which requires the following -</p>
<pre>// IDTExtensibility2<br />#import "libid:AC0714F2-3D04-11D1-AE7D-00A0C90F26F4" auto_rename auto_search raw_interfaces_only rename_namespace("AddinDesign")</pre>
<pre>// Office type library (i.e. mso.dll)<br />#import "libid:2DF8D04C-5BFA-101B-BDE5-00AA0044DE52" auto_rename auto_search raw_interfaces_only rename_namespace("Office")<br /><br />// Outlook type library (i.e. msoutl.olb)<br />#import "libid:00062FFF-0000-0000-C000-000000000046" auto_rename auto_search rename_namespace("Outlook") rename("GetOrganizer", "GetOrganizerAddressEntry")</pre>
<p>There are two ways to #import a library - by filename or by registered library id. The latter is more useful in that it doesn't require a fixed absolute path (which will change for different versions of Office, or non default installations). Unfortunately, using the libid versions confuses IntelliSense, and the Visual Studio editor doesn't recognise any of the type names, but that is only a problem in that erroneous red squigglies appear. #import can also make use of the helper classes mentioned above, but that's only useful when calling into the library as opposed to implementing interfaces defined there - here, that means that raw makes sense for the Office and extensibility libraries. The "cooked" definitions are useful for the Outlook object model library, but notice the rename at the end - without that the imported file ends up with two instances of GetOrganizer which differ only in return type, a C++ error.</p>
<p>Here are the handlers for the click and is-pressed callbacks (error checking omitted for brevity):</p>
<pre>void CNoReplyAllLite::ItemButton_Click(Office::IRibbonControl* control, VARIANT_BOOL pressed)<br />{<br />	IDispatchPtr item = GetItemFromButton(control);<br />	Outlook::ActionPtr action = GetActionFromButton(control, item);<br />	VARIANT_BOOL enabled = pressed ? VARIANT_FALSE : VARIANT_TRUE;<br />	HRESULT hr = action-&gt;put_Enabled(enabled);<br />}<br /><br />VARIANT_BOOL CNoReplyAllLite::ItemButton_IsPressed(Office::IRibbonControl* control)<br />{<br />	IDispatchPtr item = GetItemFromButton(control);<br />	Outlook::ActionPtr action = GetActionFromButton(control, item);<br />	VARIANT_BOOL enabled;<br />	HRESULT hr = action-&gt;get_Enabled(&amp;enabled);<br />	return (SUCCEEDED(hr) &amp;&amp; enabled) ? VARIANT_FALSE : VARIANT_TRUE;<br />}</pre>
<p>There are definitely too many forms of boolean in Windows C++ - bool, BOOL and VARIANT_BOOL, all of which are different base types and have different values for true, hence the (perhaps overly pedantic) conversions between bool and VARIANT_BOOL above.</p>
<p>As with the VSTO implementation, I follow a short route from the ribbon control to get hold of the item it's associated with:</p>
<pre>static IDispatchPtr GetItemFromButton(Office::IRibbonControl* control)<br />{<br />	HRESULT hr;<br />	IDispatchPtr context;<br />	hr = control-&gt;get_Context(&amp;context);<br />	Outlook::_InspectorPtr inspector = context;<br />	IDispatchPtr item;<br />	hr = inspector-&gt;get_CurrentItem(&amp;item);<br />	return item;<br />}</pre>
<p>This is where things get a bit tricky... As mentioned before, the various Outlook items which appear in inspector windows do not share a common base class. I don't want to try QueryInterface for all of them, and then use almost identical code (but for the type) to access the Action associated with each. In the managed case, I used reflection instead and, here, I do more or less the same, via the item's IDispatch interface:</p>
<pre>static Outlook::ActionPtr GetActionFromButton(Office::IRibbonControl* control, IDispatch* item)<br />{<br />	HRESULT hr;<br />	BSTR bstr = nullptr;<br />	hr = control-&gt;get_Tag(&amp;bstr);<br />	_bstr_t tag(bstr, false);<br />	int index = bstr[0] - L'0';<br />	wchar_t* actionsName = L"Actions";<br />	DISPID id;<br />	hr = disp-&gt;GetIDsOfNames(IID_NULL, &amp;actionsName, 1, LOCALE_SYSTEM_DEFAULT, &amp;id);<br />	if (FAILED(hr))<br />		return nullptr;<br />	DISPPARAMS params = {0};<br />	variant_t result;<br />	hr = disp-&gt;Invoke(id, IID_NULL, LOCALE_SYSTEM_DEFAULT, DISPATCH_PROPERTYGET, &amp;params, &amp;result, nullptr, nullptr);<br />	Outlook::ActionsPtr actions = result;<br />	Outlook::ActionPtr action;<br />	variant_t actionIndex = index;<br />	hr = actions-&gt;Item(actionIndex, &amp;action);<br />	return action;<br />}</pre>
<p>Quite a lot uglier than the C# code I've shown before, but it's doing the same thing.</p>
<p>The final task for the code is button images. Again, the C++ world is similar to the C# one, just a few more hoops to jump through. I've embedded icons for the three buttons, with resource ids 101-103, and the ribbon's loadImage callback grabs the resource and converts to an IPictureDisp to be displayed - although OleCreatePictureIndirect does indeed create one of those, I only actually need the IDispatch pointer here.</p>
<pre>IDispatchPtr CNoReplyAllLite::Ribbon_LoadImage(BSTR imageName)<br />{<br />	int resourceId = 100 + imageName[0] - L'0';<br /><br />	PICTDESC desc = {sizeof(PICTDESC)};<br />	desc.picType = PICTYPE_ICON;<br />	desc.icon.hicon = LoadIcon(g_hInst, MAKEINTRESOURCE(resourceId));<br />	assert(desc.icon.hicon);<br /><br />	IDispatchPtr pic;<br />	HRESULT hr = OleCreatePictureIndirect(&amp;desc, __uuidof(IDispatch), TRUE, (void**)&amp;pic);<br /><br />	DestroyIcon(desc.icon.hicon);<br /><br />	return pic;<br />}</pre>
<p>With all that in place, I have a native NoReplyAll implementation. It was more work than the VSTO one, up until the time I realised I had COM object locking problems in the managed version, which then became more complex and messier! Would I write any future add-ins in C++ or C#? I guess it depends: for something as teeny as this, especially if I wanted it to work across multiple Office applications, then native C++ could be a good idea. However, for anything of any complexity, the convenience of managed code really wins. One other benefit of the managed route is that the same assembly can be used in 32 and 64 bit Office: with native code, I do need to build separate DLLs for each.</p>
<p>And the final question is: is anyone sufficiently interested in this that I ought to make it a release alongside the managed download?</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10426245" width="1" height="1">
]]>
		</document>
		<document id="519e9ae6d15ac5e3c34cc8f359615591" url="http://blogs.msdn.com/b/gsmyth/archive/2013/11/17/i-ve-only-ever-written-one-application.aspx"><![CDATA[<p>Actually, I mean, I've only ever written one application <em>startup</em> - in the same way I've only ever written two <a title="Wikipedia page" href="http://en.wikipedia.org/wiki/Make_(Unix)">make</a> files, one for applications and one for libraries, I just keep changing the words... OK, that's obviously a facetious statement, but it is true that almost all my .NET desktop applications have a very standard startup sequence just to make things a bit tidier: I include the following class in most applications;</p>
<pre>internal class Program<br />{<br />    [STAThread()]<br />    public static void Main()<br />    {<br />        string name = new AssemblyName(Assembly.GetExecutingAssembly().FullName).Name;<br />        bool mutexCreated;<br />        using (var mutex = new Mutex(false, name, out mutexCreated))<br />        {<br />            if (mutexCreated)<br />            {<br />                WerExclusion(true);<br /><br />                App.Main();<br /><br />                WerExclusion(false);<br />            }<br />            else<br />                MessageBox.Show("This app already running");<br />        }<br />    }<br />}</pre>
<p>I create a <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/system.threading.mutex.aspx">mutex</a> to be able to make sure only one copy of the application is running at a time - quite useful when debugging, in case I don't notice that a copy is already running and grabbing some shared resource. The assembly name is a convenient vaguely unique name for me to use, but I do sometimes make use of an explicit name, for example, when I have multiple co-operating processes, and I want one to be able to check if another is running. (I use this in <a title="Project home page" href="http://research.microsoft.com/en-us/um/cambridge/projects/ResearchDesktop/ProjectColletta/default.htm">Project Colletta</a> for application add-ins to check if the main executable is running, to avoid messaging timeouts and errors.)</p>
<p>Unless you're a programming demigod, the first few versions of your application probably crash every so often. And this typically results in that dialog box asking you if you want to report errors to Microsoft, which is fairly pointless for a self-developed application, certainly in its early days. Since Windows Vista, a couple of functions have been available to mark (and unmark) applications as being excluded from this automatic error reporting - see the <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb513617.aspx">WerAddExcludedApplication</a>&nbsp;documentation for details. I tend to mark my applications in this way, if nothing else, to remove the delay before I can dismiss the crash dialog and close the faulting application. For tidiness, though I don't think it's necessary, I get rid of the entry in the exclusion list when my app exits (ideally this should be later than shown here, but this suffices). The following is a simple wrapper on this native mechanism:</p>
<pre>private static void WerExclusion(bool add)<br />{<br />    var exe = Assembly.GetExecutingAssembly().Location;<br />    try<br />    {<br />        int hr = add ? Win32.WerAddExcludedApplication(exe, false) :<br />                       Win32.WerRemoveExcludedApplication(exe, false);<br />        Debug.Assert(hr == 0);<br />    }<br />    catch<br />    {<br />        Debug.WriteLine("WER functions not available");<br />    }<br />}<br /><br />[DllImport("wer.dll", CharSet=CharSet.Unicode)]<br />internal static extern int WerAddExcludedApplication(string exeName, [MarshalAs(UnmanagedType.Bool)] bool allUsers);<br /><br />[DllImport("wer.dll", CharSet=CharSet.Unicode)]<br />internal static extern int WerRemoveExcludedApplication(string exeName, [MarshalAs(UnmanagedType.Bool)] bool allUsers);</pre>
<p>(Yes, I know, I'm being far too sloppy in terms of error handling here - my feeble excuse is that this is a mere nice-to-have and not essential.)</p>
<p>Of course, an alternative to the Windows error report exclusion list manipulations would be to implement an unhandled exception handler (<a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/system.appdomain.unhandledexception.aspx">AppDomain.UnhandledException</a>) but I tend not to do that for a couple of reasons: first, it needs to be done for each application domain and I often forget; second, it interferes (though only slightly) with debugging, in that by default Visual Studio traps unhandled exceptions itself, unless there's an handler for them (an easy default to change via the exception settings page). I'm in two minds about whether "proper" production applications should have unhandled exception handlers - yes, it's rather unprofessional to show your end users a crash dialog box, but then so is crashing in the first place... Besides, there's not really a huge amount such a handler can do apart from perhaps log some small amount of data and then exit the application.</p>
<p>Finally, deep within my Program.Main is a call to App.Main. In Windows Forms applications, the Visual Studio Wizard provides a Program class with a Main method, and I add my extras to that, around the call to Application.Run. In WPF applications, the normal entry point is App.Main, which is autogenerated by the build process. An executable can have as many Main methods as you want, but you do need to tell Windows which one is the real entry point - and that's pretty easy to do via the Application page of the project options - the Startup object dropdown lists all available entry points and I make sure I pick mine. App.Main can, of course, just be called like any other function too.</p>
<p>And that's it, my one and only application startup. Well, for desktop .NET applications anyway.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10421401" width="1" height="1">
]]>
		</document>
		<document id="95ac54846c7c843b23370e033717826" url="http://blogs.msdn.com/b/gsmyth/archive/2013/12/21/what-s-in-a-window.aspx"><![CDATA[<p>It's probably not too surprising that one of the important bits of functionality in <a title="Project page" href="http://research.microsoft.com/en-us/projects/projectcolletta/">Project Colletta</a> is relating a window on the screen (a HWND to be precise) to a document, in particular, to the file path of the document appearing in that window. The <a title="MSDN page" href="http://msdn.microsoft.com/en-US/office/hh133430">VSTO</a> APIs provide access to document details for all of the Office applications (what I'll refer to as the "insider" view), but do not offer any way to get hold of the window handle (the "outsider" view) and, in early (and very unreliable) prototypes I would, roughly speaking, have a global list of documents opened in Word, Excel, etc. and a separate global list of window handles, and attempt to match entries in the first list with those in the second based on window title strings. I do still end up doing this for Outlook (which goes some way towards explaining why that is the most troublesome of the Office applications Project Colletta deals with). However, <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd317978.aspx">AccessibleObjectFromWindow</a> makes things an awful lot easier for Word, Excel, PowerPoint and, as it happens, Acrobat Reader. This function exists to provide accessibility clients (such as screen readers) a way to get at the object model of whatever a window happens to be displaying, <em>i.e.</em>, a direct link from the outsider view to the insider, which is precisely what I wanted in Project Colletta. The basic pattern in Project Colletta is to watch for windows coming and going, grab ones which are of a window class of interest, and then get hold of their object model via AccessibleObjectFromWindow, and extract the file path from there.</p>
<p>For the first step, I use Windows Events (see <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd373640.aspx">SetWinEventHook</a> for details) to get a callback when windows are created or come to the foreground or move, <em>etc</em>. Only the first of those is really relevant to the current discussion, but I track movement to update the location of the docbars at the bottom of the document windows. (The docbars are implemented as separate windows, owned by the main Project Colletta application, positioned to line up with the related application window - if you drag application windows around very quickly, you can detect a lag before the docbar catches up - but that is a small price to pay compared to the complexity in incorporating the docbar code into each and every supported application process!) Here's a stripped down code fragment showing the basics.</p>
<pre>[<span>DllImport</span>(<span>"user32.dll"</span>,&nbsp;SetLastError=<span>true</span>)]
<span>internal</span>&nbsp;<span>extern</span>&nbsp;<span>static</span>&nbsp;IntPtr&nbsp;SetWinEventHook(&nbsp;<span>uint</span>&nbsp;eventMin,&nbsp;<span>uint</span>&nbsp;eventMax,&nbsp;IntPtr&nbsp;hmodWinEventProc,&nbsp;<span>WinEventProc</span>&nbsp;lpfnWinEventProc,&nbsp;<span>uint</span>&nbsp;idProcess,&nbsp;<span>uint</span>&nbsp;idThread,&nbsp;<span>uint</span>&nbsp;dwFlags&nbsp;);</pre>
<pre>private&nbsp;Win32.WinEventProc&nbsp;winEventProc;&nbsp;//&nbsp;Keep&nbsp;as&nbsp;class&nbsp;member&nbsp;to&nbsp;prevent&nbsp;premature&nbsp;GC
</pre>
<pre>private void WinEventHandler(IntPtr hWinEventHook, uint eventType, IntPtr hwnd, int idObject, int idChild, uint dwEventThread, uint dwmsEventTime)</pre>
<pre>{<br />    // Only look at top level windows<br />    if (idObject != OBJID_WINDOW || idChild != CHILDID_SELF || Win32.GetParent(hwnd) != IntPtr.Zero)<br />        return;<br /><br />    switch (eventType)<br />    {<br />        case EVENT_OBJECT_CREATE:<br />            RegisterWindow(hwnd);<br />            break;<br /><br />        ...<br />    }<br />}</pre>
<pre>&nbsp;</pre>
<pre>...</pre>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;this.winEventProc&nbsp;=&nbsp;this.WinEventHandler;
&nbsp;&nbsp;&nbsp;&nbsp;this.winEventHook&nbsp;=&nbsp;Win32.SetWinEventHook(EVENT_First,&nbsp;EVENT_Last,&nbsp;IntPtr.Zero,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.winEventProc,&nbsp;0,&nbsp;0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;/*WINEVENT_OUTOFCONTEXT|WINEVENT_SKIPOWNPROCESS*/&nbsp;);
</pre>
<pre>...</pre>
<p>When I have a new window to examine, I need to determine if it's one I'm interested in. I could look at its process name but that's a bit cumbersome and, since I need to look at its window class anyway, I can use that. A tool like <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/vstudio/dd460756.aspx">Spy++</a> can show you the complete window hierarchy of a running application, something we'll look at in a moment, but all I need now is the class name for the top level window. <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms633582.aspx">GetClassName</a> shows us that Word's main window is of class "OpusApp," Excel is "XLMAIN," PowerPoint is "PPTFrameClass" and Acrobat Reader is "AcrobatSDIWindow" - now these are not documented and guaranteed, so I do need to check them every time a new version of the application turns up.</p>
<p>The documentation for AccessibleObjectFromWindow has a table at the end showing what type of object we can get from a number of application's windoww - for example, a reference to a <a title="MSDN page" href="http://msdn.microsoft.com/en-us/library/microsoft.office.interop.word.window.aspx">Microsoft.Office.Interop.Word.Window</a> can be extracted from a window of class "_WwG" - but, hang on, we've got an "OpusApp" window, not a "_WwG" - what gives? This really is where Spy++ comes into its own: you can start at the "OpusApp" window and expand all the child windows until you find a "_WwG" a couple of levels down: one of the children of the top level window is of class "_WwF" which has one child of class "_WwB" and amongst the children of that is a single "_WwG" - it is fortunate that there only one child of the required type at each level since that makes the window search very easy. Again, this is undocumented and can change between versions (and in fact, has changed for PowerPoint - the chain for PowerPoint 2013 is "PPTFrameClass" "MDIClient" "mdiClass" but is&nbsp;"PPTFrameClass" "MDIClient" "mdiClass" "paneClassDC" for PowerPoint 2010, and something else again for PowerPoint 2007).</p>
<p>Given that, once the code above detects a top level window and I confirm it is of class "OpusApp" I can run the following to get hold of the Word object model Document displayed in it:</p>
<pre>private Word.Document GetWordDocument(IntPtr hwnd)<br />{<br />    string[] classes = new string[] { "_WwF", "_WwB", "_WwG" };<br />    var docHwnd = SetDocumentWindowByClass(hwnd, classes);<br />    if (docHwnd != IntPtr.Zero)<br />    {<br />        object o = GetDocumentObject(docHwnd, typeof(Word.Window));<br />        var window = o as Word.Window;<br />        if (window != null)<br />            return window.Document;<br />    }<br /><br />    return null;<br />}<br /><br />private static IntPtr GetDocumentWindowByClass(IntPtr topHwnd, string[] classes)<br />{<br />        IntPtr docHwnd = topHwnd;<br />        for (int i = 0; i &lt; classes.Length &amp;&amp; docHwnd != IntPtr.Zero; ++i)<br />            docHwnd = Win32.FindWindowEx(docHwnd, IntPtr.Zero, classes[i], null);<br />        return docHwnd;<br />}</pre>
<pre><span>private</span>&nbsp;<span>static</span>&nbsp;GetDocumentObject(IntPtr docHwnd, <span>Type</span>&nbsp;documentObjectType)
{
&nbsp;&nbsp;&nbsp;&nbsp;Guid&nbsp;guid&nbsp;=&nbsp;documentObjectType.GUID;
&nbsp;&nbsp;&nbsp;&nbsp;<span>object</span>&nbsp;o;
&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span>&nbsp;(AccessibleObjectFromWindow(docHwnd,&nbsp;OBJID_NATIVEOM,&nbsp;<span>ref</span>&nbsp;guid,&nbsp;<span>out</span>&nbsp;o)&nbsp;!=&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;=&nbsp;<span>null</span>;
&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;o;
}
 
[<span>DllImport</span>(<span>"oleacc.dll"</span>)]
<span>private</span>&nbsp;<span>static</span>&nbsp;<span>extern</span>&nbsp;<span>int</span>&nbsp;AccessibleObjectFromWindow(IntPtr&nbsp;hwnd,&nbsp;<span>uint</span>&nbsp;id,&nbsp;<span>ref</span>&nbsp;Guid&nbsp;iid,&nbsp;[<span>MarshalAs</span>(<span>UnmanagedType</span>.IDispatch)]&nbsp;<span>out</span>&nbsp;<span>object</span>&nbsp;ppv);
<span>private</span>&nbsp;<span>const</span>&nbsp;<span>uint</span>&nbsp;OBJID_NATIVEOM&nbsp;=&nbsp;0xFFFFFFF0;
</pre>
<p>A bit of web spelunking and playing with Spy++ showed a pleasant surprise with Acrobat Reader. It exposes a (rather limited) document model too. Underneath top level window of class "AcrobatSDIWindow" can be found a chain of &nbsp;"AVSplitterView",&nbsp;"AVSplitationPageView",&nbsp;"AVSplitterView",&nbsp;"AVScrolledPageView",&nbsp;"AVScrollView",&nbsp;"AVPageView" (earlier versions of Acrobat Reader have different window hierarchies) and from the last of those we can get an IPDDomDocument, defined in the AcrobatAccessLib COM library (which you can easily get hold of via Add Reference, COM libraries), and this exposes a path value. Unfortunately, in protected mode (which is the default in later versions of the Acrobat Reader), the path is to a temporary copy rather than to the file the user opened, so it's not so useful after all.</p>
<p>So, to conclude, VSTO gives you a good insider view of an application, and AccessibleObjectFromWindow can link that to the outsider view, so that you can make something associated with the window on the screen react to the contents of the document shown in that window.</p><div style="clear:both;"></div><img src="http://blogs.msdn.com/aggbug.aspx?PostID=10474815" width="1" height="1">
]]>
		</document>
	</documents>
</author>